===============================================================================
=                                    PicoC                                    =
===============================================================================
----------------------------------- L_Arith -----------------------------------
un_op ::= Minus() | Not()
bin_op ::= Add() | Sub() | Mul() | Div() | Mod() | Oplus() | And() | Or()
exp ::= Name(str) | Num(str) | Char(str)
      | BinOp(<exp>, <bin_op>, <exp>)
      | UnOp(<un_op>, <exp>) | Call(Name('input'), None)
exp_stmts ::= Alloc(<type_qual>, <dataype>, Name(str)) | Call(Name('print'), <exp>)
stmt ::= SingleLineComment(str, str)
----------------------------------- L_Logic -----------------------------------
un_op ::= LogicNot()
rel ::= Eq() | NEq() | Lt() | LtE() | Gt() | GtE()
bin_op ::= LogicAnd() | LogicOr()
exp ::= Atom(<exp>, <rel>, <exp>)
      | ToBool(<exp>)
-------------------------------- L_Assign_Alloc -------------------------------
type_qual ::= Const() | Writeable()
datatype ::= IntType() | CharType() | VoidType()
assign_lhs ::= Alloc(<type_qual>, <dataype>, Name(str)) | <ref_loc>
exp_stmts ::= Alloc(<type_qual>, <dataype>, Name(str))
stmt ::= Assign(<assign_lhs>, <exp>)
       | Exp(<exp_stmts>)
------------------------------------ L_Pntr -----------------------------------
datatype ::= PntrDecl(Num(str), <datatype>)
deref_loc ::= Ref(<ref_loc>)|<ref_loc>
ref_loc ::= Name(str)
          | Deref(<deref_loc>, <exp>)
          | Subscr(<deref_loc>, <exp>)
          | Attr(<ref_loc>, Name(str))
exp ::= Deref(<deref_loc>, <exp>)
      | Ref(<ref_loc>)
----------------------------------- L_Array -----------------------------------
datatype ::= ArrayDecl(Num(str)+, <datatype>)
exp ::= Subscr(<deref_loc>, <exp>)
stmt ::= Assign(Alloc(Writeable(), ArrayDecl(Num(str)+, <datatype>), Name(str)), Array(<exp>+))
----------------------------------- L_Struct ----------------------------------
datatype ::= StructSpec(Name(str))
exp ::= Attr(<ref_loc>, Name(str))
stmt ::= Assign(Alloc(Writeable(), StructSpec(Name(str)), Name(str)), Struct(Assign(Name(str), <exp>)+))
decl_def ::= StructDecl(Name(str), Alloc(Writeable(), <datatype>, Name(str))+)
---------------------------------- L_If_Else ----------------------------------
stmt ::= If(<exp>, <stmt>*)
       | IfElse(<exp>, <stmt>*, <stmt>*)
------------------------------------ L_Loop -----------------------------------
stmt ::= While(<exp>, <stmt>*)
       | DoWhile(<exp>, <stmt>*)
------------------------------------ L_Fun ------------------------------------
exp ::= Call(Name(str), <exp>*)
exp_stmts ::= Call(Name(str), <exp>*)
stmt ::= Return(<exp>)
decl_def ::= FunDecl(<datatype>, Name(str), Alloc(Writeable(), <datatype>, Name(str))*)
           | FunDef(<datatype>, Name(str), Alloc(Writeable(), <datatype>, Name(str))*, <stmt>*)
------------------------------------ L_File -----------------------------------
file ::= File(Name(str), <decl_def>*)
===============================================================================
=                                 PicoC_Shrink                                =
===============================================================================
===============================================================================
=                                 PicoC_Blocks                                =
===============================================================================
------------------------------------ L_Fun ------------------------------------
decl_def ::= FunDef(<datatype>, Name(str), Alloc(Writeable(), <datatype>, Name(str))*, <block>*)
----------------------------------- L_Blocks ----------------------------------
block ::= Block(Name(str), <stmt>*)
stmt ::= Goto(Name(str)) | NewStackframe(Name(), Goto(str)) | RemoveStackframe()
       | SetScope(Name(str))
===============================================================================
=                                  PicoC_Mon                                  =
===============================================================================
-------------------------------- L_Assign_Alloc -------------------------------
ref_loc ::= Memory(Num(str))
error_data ::= <exp> | Pos(Num(str), Num(str))
exp ::= Stack(Num(str)) | Ref(<ref_loc>, <datatype>, <error_data>)
stmt ::= Exp(<exp>)
       | Assign(Alloc(Writeable(), StructSpec(Name(str)), Name(str)), Struct(Assign(Name(str), <exp>)+, <datatype>))
       | Assign(Alloc(Writeable(), ArrayDecl(Num(str)+, <datatype>), Name(str)), Array(<exp>+, <datatype>))
# TODO: ausschreiben mit Stack()
-------------------------------- L_Symbol_Table -------------------------------
symbol_table ::= SymbolTable(<symbol>)
symbol ::= Symbol(<type_qual>, <datatype>, <name>, <val>, <pos>, <size>)
type_qual ::= Empty()
datatype ::= BuiltIn() | SelfDefined()
name ::= Name(str)
val ::= Num(str) | Empty()
pos ::= Pos(Num(str), Num(str)) | Empty()
size ::= Num(str) | Empty()
===============================================================================
=                                 RETI_Blocks                                 =
===============================================================================
---------------------------------- L_Program ----------------------------------
program ::= Program(Name(str), <block>*)
exp_stmts ::= Goto(str)
----------------------------------- L_Blocks ----------------------------------
instrs_before = Num(str)
num_instrs = Num(str)
block ::= Block(Name(str), <instr>*, <instrs_before>, <num_instrs>)
instr ::= Goto(Name(str))
===============================================================================
=                                  RETI_Patch                                 =
===============================================================================
===============================================================================
=                                     RETI                                    =
===============================================================================
---------------------------------- L_Program ----------------------------------
reg ::= ACC() | IN1() | IN2() | PC() | SP() | BAF() | CS() | DS()
arg ::= Reg(<reg>) | Num(str)
rel ::= Eq() | NEq() | Lt() | LtE() | Gt() | GtE() | Always() | NOp()
op ::= Add() | Addi() | Sub() | Subi() | Mult() | Multi() | Div() | Divi()
     | Mod() | Modi() | Oplus() | Oplusi() | Or() | Ori() | And() | Andi()
     | Load() | Loadin() | Loadi()
     | Store() | Storein() | Move()
instr ::= Instr(<op>, <arg>+) | Jump(<rel>, Num(str)) | Int(Num(str)) |, RTI()
        | Call(Name('print'), <reg>) | Call(Name('input'), <reg>)
        | SingleLineComment(str, str)
program ::= Program(Name(str), <instr>*)
