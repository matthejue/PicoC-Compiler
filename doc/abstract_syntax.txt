// ---------------------------------- L_Arith ---------------------------------
un_op ::= Minus() | Not()
bin_op ::= Add() | Sub() | Mul() | Div() | Mod() | Oplus() | And() | Or()
exp ::= Name(str) | Num(str) | Char(str)
      | BinOp(<exp>, <bin_op>, <exp>)
      | UnOp(<un_op>, <exp>) | Call(Name('input'), None)
stmt ::= Exp(Call(Name('print'), <exp>))
// ---------------------------------- L_Logic ---------------------------------
un_op ::= LogicNot()
relation ::= Eq() | NEq() | Lt() | LtE() | Gt() | GtE()
bin_op ::= LogicAnd() | LogicOr()
exp ::= Atom(<exp>, <relation>, <exp>)
      | ToBool(<exp>)
// ------------------------------ L_Assign_Alloc ------------------------------
type_qual ::= Const() | Writeable()
size_qual ::= IntType() | CharType() | VoidType() | <struct_spec>
stmt ::= Alloc(<type_qual>, <size_qual>, <pntr_decl>)
       | Assign(<ref_loc>, <exp>)
       | Assign(Alloc(<type_qual>, <size_qual>, <pntr_decl>), <exp>)
// --------------------------------- L_Pointer --------------------------------
pntr_decl ::= PntrDecl(Num(str), <array_decl>)
deref_loc ::= Ref(<ref_loc>)|<ref_loc>
ref_loc ::= Name(str)
          | Deref(<deref_loc>, <exp>)
          | Subscr(<deref_loc>, <exp>)
          | Attr(<ref_loc>, Name(str))
exp ::= Deref(<deref_loc>, <exp>)
      | Ref(<ref_loc>)
// ---------------------------------- L_Array ---------------------------------
array_decl ::= ArrayDecl(Name(str), Num(str)*) | ArrayDecl(<pntr_decl>, Num(str)*)
exp ::= Subscr(<deref_loc>, <exp>)
stmt ::= Assign(Alloc(<type_qual>, <size_qual>, <pntr_decl>), Array(<exp>+))
// --------------------------------- L_Struct ---------------------------------
struct_spec ::= StructSpec(Name(str))
exp ::= Attr(<ref_loc>, Name(str))
stmt ::= Assign(Alloc(<type_qual>, <size_qual>, <pntr_decl>), Struct(Assign(Name(str), <exp>)+))
decl_def ::= StructDecl(Name(str), Param(<size_qual>, Name(str))+)
// --------------------------------- L_If_Else --------------------------------
stmt ::= If(<exp>, <stmt>*)
       | IfElse(<exp>, <stmt>*, <stmt>*)
// ---------------------------------- L_Loop ----------------------------------
stmt ::= While(<exp>, <stmt>*)
       | DoWhile(<exp>, <stmt>*)
// ----------------------------------- L_Fun ----------------------------------
fun_decl ::= FunType(<size_qual>)
exp ::= Call(Name(str), <exp>*) | Null()
stmt ::= Exp(Call(Name(str), <exp>*))
       | Return(<exp>)
decl_def ::= FunDecl(<size_qual>, Name(str), Param(<size_qual>, Name(str))*)
           | FunDef(<size_qual>, Name(str), Param(<size_qual>, Name(str))*, <stmt>*)
// ---------------------------------- L_File ----------------------------------
file ::= File(Name(str), <decl_def>*)
// ---------------------------------- L_Block ---------------------------------
stmt ::= Goto(Name(str))
block ::= Block(Name(str), <stmt>*)
decl_def ::= FunDef(<size_qual>, Name(str), Param(<size_qual>, Name(str))*, <block>*)
