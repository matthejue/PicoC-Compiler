// ---------------------------------- L_Arith ---------------------------------
un_op ::= Minus() | Not()
bin_op ::= Add() | Sub() | Mul() | Div() | Mod() | Oplus() | And() | Or()
exp ::= Name(str) | Num(str) | Char(str)
      | BinOp(<exp>, <bin_op>, <exp>)
      | UnOp(<un_op>, <exp>) | Call(Name('input'), None)
stmt ::= Call(Name('print'), <exp>)
// ---------------------------------- L_Logic ---------------------------------
un_op ::= LogicNot()
relation ::= Eq() | NEq() | Lt() | LtE() | Gt() | GtE()
logic_op ::= LogicAnd() | LogicOr()
exp ::= BinOp(<exp>, <logic_op>, <exp>)
      | Atom(<exp>, <relation>, <exp>)
      | ToBool(<exp>)
// ------------------------------ L_Assign_Alloc ------------------------------
type_qual ::= Const() | Writeable()
size_qual ::= IntType() | CharType() | VoidType() | <struct_spec>
stmt ::= Alloc(<type_qual>, <size_qual>, <pntr_decl>, Name(str), <array_decl>)
       | Assign(Name(str), <exp>)
       | Assign(Alloc(<type_qual>, <size_qual>, <pntr_decl>, Name(str),
                      <array_decl>), <exp>)
// --------------------------------- L_Pointer --------------------------------
pntr_decl ::= PntrDecl(Num(str))
exp ::= Deref(<exp>, <exp>)
      | Ref(Name(str))
      | Ref(Deref(<exp>))
stmt ::= Assign(Deref(<exp>), <exp>)
// ---------------------------------- L_Array ---------------------------------
array_decl ::= ArrayDecl(Num(str)*)
exp ::= Array(<exp>+)
      | Subscript(<exp>, <exp>)
      | Ref(Subscript(<exp>, <exp>))
stmt ::= Assign(Subscript(<exp>, <exp>), <exp>)
// --------------------------------- L_Struct ---------------------------------
struct_spec ::= StructSpec(Name(str))
exp ::= Struct(Assign(Name(str), <exp>)+)
      | Attribute(Name(str), Name(str))
      | Ref(Attribute(Name(str), Name(str)))
stmt ::= Assign(Attribute(Name(str), Name(str)), <exp>)
       | StructDecl(Name(str), Param(<size_qual>, Name(str))+)
// --------------------------------- L_If_Else --------------------------------
stmt ::= If(<exp>, <stmt>*)
       | IfElse(<exp>, <stmt>*, <stmt>*)
// ---------------------------------- L_Loop ----------------------------------
stmt ::= While(<exp>, <stmt>*)
       | DoWhile(<exp>, <stmt>*)
// ----------------------------------- L_Fun ----------------------------------
fun_decl ::= FunType(<size_qual>)
exp ::= Call(Name(str), <exp>*)
stmt ::= Exp(Call(Name(str), <exp>*))
       | Return(<exp>)
def ::= FunDef(<size_qual>, Name(str), Param(<size_qual>, Name(str))*, <stmt>*)
// ---------------------------------- L_File ----------------------------------
file ::= File(Name(str), <def>*)
// ---------------------------------- L_Block ---------------------------------
def ::= FunDef(<size_qual>, Name(str), Param(<size_qual>, Name(str))*, <block>*)
block ::= Block(Name(str), <stmt>*)
goto ::= Goto(Name(str))
