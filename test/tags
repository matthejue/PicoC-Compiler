!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/areo/Documents/Studium/pico_c_compiler/test/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
Args	grammar_test.py	/^class Args(object):$/;"	c
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
TestArithmeticExpressionGrammar	grammar_test.py	/^class TestArithmeticExpressionGrammar(unittest.TestCase, UsefullTools):$/;"	c
TestIfElseGrammar	grammar_test.py	/^class TestIfElseGrammar(unittest.TestCase, UsefullTools):$/;"	c
TestLexer	grammar_test.py	/^class TestLexer(unittest.TestCase, UsefullTools):$/;"	c
TestLogicExpressionGrammar	grammar_test.py	/^class TestLogicExpressionGrammar(unittest.TestCase, UsefullTools):$/;"	c
TestLoopGrammar	grammar_test.py	/^class TestLoopGrammar(unittest.TestCase, UsefullTools):$/;"	c
TestPrograms	grammar_test.py	/^class TestPrograms(unittest.TestCase, UsefullTools):$/;"	c
UsefullTools	grammar_test.py	/^class UsefullTools():$/;"	c
__init__	grammar_test.py	/^    def __init__(self):$/;"	m	class:Args
grammar	grammar_test.py	/^    grammar = None$/;"	v	class:UsefullTools
lexer	grammar_test.py	/^    lexer = None$/;"	v	class:UsefullTools
s:l	Session.vim	/^let s:l = 254 - ((33 * winheight(0) + 21) \/ 43)$/;"	v
s:save_winminheight	Session.vim	/^let s:save_winminheight = &winminheight$/;"	v
s:save_winminwidth	Session.vim	/^let s:save_winminwidth = &winminwidth$/;"	v
s:so_save	Session.vim	/^let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
set_everything_up_for_ast	grammar_test.py	/^    def set_everything_up_for_ast(self, code):$/;"	m	class:UsefullTools
set_everything_up_for_ast_multiline	grammar_test.py	/^    def set_everything_up_for_ast_multiline(self, testname, code_without_cr):$/;"	m	class:UsefullTools
set_everything_up_for_lexer	grammar_test.py	/^    def set_everything_up_for_lexer(self, code):$/;"	m	class:UsefullTools
set_everything_up_for_testing_programs	grammar_test.py	/^    def set_everything_up_for_testing_programs(self, programname, programpath):$/;"	m	class:UsefullTools
test_basic_arithmetic_expression	grammar_test.py	/^    def test_basic_arithmetic_expression(self):$/;"	m	class:TestArithmeticExpressionGrammar
test_connected_logic_expression	grammar_test.py	/^    def test_connected_logic_expression(self):$/;"	m	class:TestLogicExpressionGrammar
test_do_while_loop	grammar_test.py	/^    def test_do_while_loop(self, ):$/;"	m	class:TestLoopGrammar
test_else_if	grammar_test.py	/^    def test_else_if(self, ):$/;"	m	class:TestIfElseGrammar
test_gcd	grammar_test.py	/^    def test_gcd(self, ):$/;"	m	class:TestPrograms
test_if_else_braces	grammar_test.py	/^    def test_if_else_braces(self):$/;"	m	class:TestIfElseGrammar
test_if_else_grammar	grammar_test.py	/^    def test_if_else_grammar(self):$/;"	m	class:TestIfElseGrammar
test_logic_and_arithmetic_parenthesis_mixed	grammar_test.py	/^    def test_logic_and_arithmetic_parenthesis_mixed(self, ):$/;"	m	class:TestLogicExpressionGrammar
test_logic_expression	grammar_test.py	/^    def test_logic_expression(self):$/;"	m	class:TestLogicExpressionGrammar
test_logic_precedence_1	grammar_test.py	/^    def test_logic_precedence_1(self, ):$/;"	m	class:TestLogicExpressionGrammar
test_logic_precedence_2	grammar_test.py	/^    def test_logic_precedence_2(self, ):$/;"	m	class:TestLogicExpressionGrammar
test_loop_and_nested_if_else	grammar_test.py	/^    def test_loop_and_nested_if_else(self, ):$/;"	m	class:TestLoopGrammar
test_loop_statements_after_another	grammar_test.py	/^    def test_loop_statements_after_another(self, ):$/;"	m	class:TestLoopGrammar
test_mixed_if_else_after_another	grammar_test.py	/^    def test_mixed_if_else_after_another(self, ):$/;"	m	class:TestIfElseGrammar
test_negative_parenthesis_and_variable	grammar_test.py	/^    def test_negative_parenthesis_and_variable(self):$/;"	m	class:TestArithmeticExpressionGrammar
test_nested_loops	grammar_test.py	/^    def test_nested_loops(self, ):$/;"	m	class:TestLoopGrammar
test_numbers	grammar_test.py	/^    def test_numbers(self, ):$/;"	m	class:TestLexer
test_parenthesis	grammar_test.py	/^    def test_parenthesis(self):$/;"	m	class:TestArithmeticExpressionGrammar
test_precedence_1	grammar_test.py	/^    def test_precedence_1(self):$/;"	m	class:TestArithmeticExpressionGrammar
test_precedence_2	grammar_test.py	/^    def test_precedence_2(self):$/;"	m	class:TestArithmeticExpressionGrammar
test_precedence_3	grammar_test.py	/^    def test_precedence_3(self):$/;"	m	class:TestArithmeticExpressionGrammar
test_several_statements_loop	grammar_test.py	/^    def test_several_statements_loop(self, ):$/;"	m	class:TestLoopGrammar
test_space_and_word_seperation	grammar_test.py	/^    def test_space_and_word_seperation(self, ):$/;"	m	class:TestLexer
test_two_if_after_another	grammar_test.py	/^    def test_two_if_after_another(self, ):$/;"	m	class:TestIfElseGrammar
test_unary_operators	grammar_test.py	/^    def test_unary_operators(self):$/;"	m	class:TestArithmeticExpressionGrammar
test_while_loop	grammar_test.py	/^    def test_while_loop(self, ):$/;"	m	class:TestLoopGrammar
