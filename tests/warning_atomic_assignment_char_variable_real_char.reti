# File 'warning_atomic_assignment_char_variable_real_char' Start
# Main Funktion '(void main ((int car) = 99) ... )' Start
LOADI SP 200;
# Zuweisung '((int car) = 99)' Start
# Allokation '(int car)' Start
# Variable 'car' vom Typ 'int' mit Adresse '100' zur Symboltabelle hinzugefügt
# Allokation '(int car)' Ende
# Arithmetischer Operand '99' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 99;                          # Wert von '99' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '99' Ende
LOADIN SP ACC 1;                       # Wert von '99' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert '99' in Variable 'car' speichern
# Zuweisung '((int car) = 99)' Ende
# Zuweisung '((char var) = car)' Start
# Allokation '(char var)' Start
# Variable 'var' vom Typ 'char' mit Adresse '101' zur Symboltabelle hinzugefügt
# Allokation '(char var)' Ende
# Arithmetischer Operand 'car' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von 'car' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand 'car' Ende
LOADIN SP ACC 1;                       # Wert von 'car' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Implizite Konversion von 'int' zu 'char' Start
LOADI IN1 255;                         # Bitmaske '00000000_00000000_00000000_11111111' für char Datentyp erstellen
AND ACC IN1;                           # Wo in der Bitmaske eine '0' ist, werden die Bits ebenfalls zu '0'
LOADI IN2 32768;                       # Bitvektor '10000000_00000000' laden
MULTI IN2 65536;                       # Bit '1' im Bitvektor um 16 Bits shiften: '10000000_00000000_00000000_00000000'
AND ACC IN1;                           # Testen, ob Zahl negativ ist
JUMP== 3;                              # Signextension für negative Zahl überspringen, wenn Zahl nicht negativ ist
LOADI IN1 -256;                        # Bitsmaske '11111111_11111111_11111111_00000000' für signextension erstellen
OR ACC IN1;                            # Wo in der Bitmaske eine '1' ist, werden die Bits ebenfallls zu '1'
# Implizite Konversion von 'int' zu 'char' Ende
STORE ACC 101;                         # Wert 'car' in Variable 'var' speichern
# Zuweisung '((char var) = car)' Ende
JUMP 0;
# Main Funktion '(void main ((int car) = 99) ... )' Ende
# File 'warning_atomic_assignment_char_variable_real_char' Ende
