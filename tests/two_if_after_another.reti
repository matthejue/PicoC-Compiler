# File two_if_after_another Start
# Main Funktion (void main ((char var) = 10) ... ) Start
LOADI SP 200;
# Zuweisung ((char var) = 10) Start
# Allokation (char var) Start
# Variable var vom Typ char mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (char var) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 10;                          # Wert von 10 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 1;                       # Wert von '10' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert '10' in Variable 'var' speichern
# Zuweisung ((char var) = 10) Ende
# If Statement If((var == 0) ((int cars) = 10)) Start
# Logisches Atom (var == 0) Start
# Arithmetischer Operand var Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von var in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand var Ende
# Arithmetischer Operand 0 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 0;                           # Wert von 0 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 0 Ende
LOADIN SP ACC 2;                       # Wert von var in ACC laden
LOADIN SP IN2 1;                       # Wert von 0 in IN2 laden
SUB ACC IN2;                           # var - 0 in ACC laden
JUMP== 3;                              # Ergebnis 1, wenn (var == 0) erfüllt
LOADI ACC 0;                           # Ergebnis 0, wenn (var == 0) nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis 1, wenn var == 0 wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom (var == 0) Ende
LOADIN SP ACC 1;                       # Wert von (var == 0) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
JUMP== 7;                              # Branch überspringen
# If-Branch
# Zuweisung ((int cars) = 10) Start
# Allokation (int cars) Start
# Variable cars vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int cars) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 10;                          # Wert von 10 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 1;                       # Wert von '10' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 101;                         # Wert '10' in Variable 'cars' speichern
# Zuweisung ((int cars) = 10) Ende
# If Statement If((var == 0) ((int cars) = 10)) Ende
# If Statement If((cars == 10) (var = 42)) Start
# Logisches Atom (cars == 10) Start
# Arithmetischer Operand cars Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 101;                          # Wert von cars in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand cars Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 10;                          # Wert von 10 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;                       # Wert von cars in ACC laden
LOADIN SP IN2 1;                       # Wert von 10 in IN2 laden
SUB ACC IN2;                           # cars - 10 in ACC laden
JUMP== 3;                              # Ergebnis 1, wenn (cars == 10) erfüllt
LOADI ACC 0;                           # Ergebnis 0, wenn (cars == 10) nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis 1, wenn cars == 10 wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom (cars == 10) Ende
LOADIN SP ACC 1;                       # Wert von (cars == 10) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
JUMP== 7;                              # Branch überspringen
# If-Branch
# Zuweisung (var = 42) Start
# Arithmetischer Operand 42 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 42;                          # Wert von 42 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 42 Ende
LOADIN SP ACC 1;                       # Wert von '42' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert '42' in Variable 'var' speichern
# Zuweisung (var = 42) Ende
# If Statement If((cars == 10) (var = 42)) Ende
JUMP 0;
# Main Funktion (void main ((char var) = 10) ... ) Ende
# File two_if_after_another Ende
