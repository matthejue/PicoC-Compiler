# File ./tests/logic_precedence_2.picoc Start
# Main Funktion (void main (int dom) ... ) Start
LOADI SP 200;
# Allokation (int dom) Start
# Variable dom vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int dom) Ende
# Allokation (int a) Start
# Variable a vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int a) Ende
# Allokation (char b) Start
# Variable b vom Typ char mit Adresse 102 zur Symboltabelle hinzugefügt
# Allokation (char b) Ende
# Allokation (char c) Start
# Variable c vom Typ char mit Adresse 103 zur Symboltabelle hinzugefügt
# Allokation (char c) Ende
# Zuweisung ((int var) = ((12 == dom) || ((c >= 4) || (a != b)))) Start
# Allokation (int var) Start
# Variable var vom Typ int mit Adresse 104 zur Symboltabelle hinzugefügt
# Allokation (int var) Ende
# Logische binäre Verknüpfung ((12 == dom) || ((c >= 4) || (a != b))) Start
# Logisches Atom (12 == dom) Start
# Arithmetischer Operand 12 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 12;                          # Wert von 12 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 12 Ende
# Arithmetischer Operand dom Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von dom in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand dom Ende
LOADIN SP ACC 2;                       # Wert von 12 in ACC laden
LOADIN SP IN2 1;                       # Wert von dom in IN2 laden
SUB ACC IN2;                           # 12 - dom in ACC laden
JUMP== 3;                              # Ergebnis 1, wenn (12 == dom) erfüllt
LOADI ACC 0;                           # Ergebnis 0, wenn (12 == dom) nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis 1, wenn 12 == dom wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom (12 == dom) Ende
# Logische binäre Verknüpfung ((c >= 4) || (a != b)) Start
# Logisches Atom (c >= 4) Start
# Arithmetischer Operand c Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 103;                          # Wert von c in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand c Ende
# Arithmetischer Operand 4 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 4;                           # Wert von 4 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 4 Ende
LOADIN SP ACC 2;                       # Wert von c in ACC laden
LOADIN SP IN2 1;                       # Wert von 4 in IN2 laden
SUB ACC IN2;                           # c - 4 in ACC laden
JUMP>= 3;                              # Ergebnis 1, wenn (c >= 4) erfüllt
LOADI ACC 0;                           # Ergebnis 0, wenn (c >= 4) nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis 1, wenn c >= 4 wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom (c >= 4) Ende
# Logisches Atom (a != b) Start
# Arithmetischer Operand a Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 101;                          # Wert von a in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand a Ende
# Arithmetischer Operand b Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 102;                          # Wert von b in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand b Ende
LOADIN SP ACC 2;                       # Wert von a in ACC laden
LOADIN SP IN2 1;                       # Wert von b in IN2 laden
SUB ACC IN2;                           # a - b in ACC laden
JUMP!= 3;                              # Ergebnis 1, wenn (a != b) erfüllt
LOADI ACC 0;                           # Ergebnis 0, wenn (a != b) nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis 1, wenn a != b wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom (a != b) Ende
LOADIN SP ACC 2;                       # Wert von (c >= 4) in ACC laden
LOADIN SP IN2 1;                       # Wert von (a != b) in IN2 laden
OR ACC IN2;                            # ((c >= 4) || (a != b)) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logische binäre Verknüpfung ((c >= 4) || (a != b)) Ende
LOADIN SP ACC 2;                       # Wert von (12 == dom) in ACC laden
LOADIN SP IN2 1;                       # Wert von ((c >= 4) || (a != b)) in IN2 laden
OR ACC IN2;                            # ((12 == dom) || ((c >= 4) || (a != b))) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logische binäre Verknüpfung ((12 == dom) || ((c >= 4) || (a != b))) Ende
LOADIN SP ACC 1;                       # Wert von ((12 == dom) || ((c >= 4) || (a != b))) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 104;                         # Wert von ((12 == dom) || ((c >= 4) || (a != b))) in Variable (int var) speichern
# Zuweisung ((int var) = ((12 == dom) || ((c >= 4) || (a != b)))) Ende
JUMP 0;
# Main Funktion (void main (int dom) ... ) Ende
# File ./tests/logic_precedence_2.picoc Ende
