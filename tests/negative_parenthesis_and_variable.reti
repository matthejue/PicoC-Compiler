# File ./tests/negative_parenthesis_and_variable.picoc Start
# Main Funktion (void main (char cars) ... ) Start
LOADI SP 200;
# Allokation (char cars) Start
# Variable cars vom Typ char mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (char cars) Ende
# Zuweisung ((int var) = (- ((- cars) % 2))) Start
# Allokation (int var) Start
# Variable var vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int var) Ende
# Arithmetische unäre Operation (- ((- cars) % 2)) Start
# Arithmetische binäre Operation ((- cars) % 2) Start
# Arithmetische unäre Operation (- cars) Start
# Arithmetischer Operand cars Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von cars in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand cars Ende
LOADI ACC 0;                           # 0 in ACC laden
LOADIN SP IN2 1;                       # Wert von e1 in IN2 laden
SUB ACC IN2;                           # (0 - e1) in ACC laden
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Arithmetische unäre Operation (- cars) Ende
# Arithmetischer Operand 2 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 2;                           # Wert von 2 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 2;                       # Wert von (- cars) in ACC laden
LOADIN SP IN2 1;                       # Wert von 2 in IN2 laden
MOD ACC IN2;                           # Wert von ((- cars) % 2) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((- cars) % 2) Ende
LOADI ACC 0;                           # 0 in ACC laden
LOADIN SP IN2 1;                       # Wert von e1 in IN2 laden
SUB ACC IN2;                           # (0 - e1) in ACC laden
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Arithmetische unäre Operation (- ((- cars) % 2)) Ende
LOADIN SP ACC 1;                       # Wert von (- ((- cars) % 2)) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 101;                         # Wert von (- ((- cars) % 2)) in Variable var speichern
# Zuweisung ((int var) = (- ((- cars) % 2))) Ende
JUMP 0;
# Main Funktion (void main (char cars) ... ) Ende
# File ./tests/negative_parenthesis_and_variable.picoc Ende
