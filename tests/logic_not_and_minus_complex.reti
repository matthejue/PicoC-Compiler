# File 'logic_not_and_minus_complex' Start
# Main Funktion '(void main ((char bool) = 0) ... )' Start
LOADI SP 256;
# Zuweisung '((char bool) = 0)' Start
# Allokation '(char bool)' Start
# Variable 'bool' vom Typ 'char' mit Adresse '128' zur Symboltabelle hinzugefügt
# Allokation '(char bool)' Ende
# Arithmetischer Operand '0' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 0;                           # Wert von '0' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '0' Ende
LOADIN SP ACC 1;                       # Wert von '0' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 128;                         # Wert '0' in Variable 'bool' speichern
# Zuweisung '((char bool) = 0)' Ende
# Zuweisung '((char var) = Not(Not(ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool))))))))))' Start
# Allokation '(char var)' Start
# Variable 'var' vom Typ 'char' mit Adresse '129' zur Symboltabelle hinzugefügt
# Allokation '(char var)' Ende
# Logische unäre Verknüpfung 'Not(Not(ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool)))))))))' Start
# Logische unäre Verknüpfung 'Not(ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool))))))))' Start
# Logischer Wahrheitswert aus arithmetischem Ausdruck 'ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool)))))))' Start
# Arithmetische unäre Operation '(- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool))))))' Start
# Arithmetische unäre Operation '(- (Not(((1 - 1) < 12)) && Not(ToBool((- bool)))))' Start
# Logische binäre Verknüpfung '(Not(((1 - 1) < 12)) && Not(ToBool((- bool))))' Start
# Logische unäre Verknüpfung 'Not(((1 - 1) < 12))' Start
# Logisches Atom '((1 - 1) < 12)' Start
# Arithmetische binäre Operation '(1 - 1)' Start
# Arithmetischer Operand '1' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 1;                           # Wert von '1' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '1' Ende
# Arithmetischer Operand '1' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 1;                           # Wert von '1' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '1' Ende
LOADIN SP ACC 2;                       # Wert von '1' in ACC laden
LOADIN SP IN2 1;                       # Wert von '1' in IN2 laden
SUB ACC IN2;                           # Wert von '(1 - 1)' in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation '(1 - 1)' Ende
# Arithmetischer Operand '12' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 12;                          # Wert von '12' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '12' Ende
LOADIN SP ACC 2;                       # Wert von '(1 - 1)' in ACC laden
LOADIN SP IN2 1;                       # Wert von '12' in IN2 laden
SUB ACC IN2;                           # '(1 - 1) - 12' in ACC laden
JUMP< 3;                               # Ergebnis '1', wenn '((1 - 1) < 12)' erfüllt
LOADI ACC 0;                           # Ergebnis '0', wenn '((1 - 1) < 12)' nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis '1', wenn '((1 - 1) < 12)' wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom '((1 - 1) < 12)' Ende
LOADI ACC 1;                           # '1' in ACC laden
LOADIN SP IN2 1;                       # Wert von '((1 - 1) < 12)' in IN2 laden
OPLUS ACC IN2;                         # '!(((1 - 1) < 12))' in ACC laden
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Logische unäre Verknüpfung 'Not(((1 - 1) < 12))' Ende
# Logische unäre Verknüpfung 'Not(ToBool((- bool)))' Start
# Logischer Wahrheitswert aus arithmetischem Ausdruck 'ToBool((- bool))' Start
# Arithmetische unäre Operation '(- bool)' Start
# Arithmetischer Operand 'bool' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 128;                          # Wert von 'bool' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand 'bool' Ende
LOADI ACC 0;                           # '0' in ACC laden
LOADIN SP IN2 1;                       # Wert von 'e1' in IN2 laden
SUB ACC IN2;                           # '(0 - e1)' in ACC laden
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Arithmetische unäre Operation '(- bool)' Ende
LOADIN SP ACC 1;                       # Wert von '(- bool)' in ACC laden
JUMP== 3;                              # Überspringe 2 Befehle, wenn '(- bool)' den Wert '0' hat
LOADI ACC 1;
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Logischer Wahrheitswert aus arithmetischem Ausdruck 'ToBool((- bool))' Ende
LOADI ACC 1;                           # '1' in ACC laden
LOADIN SP IN2 1;                       # Wert von 'ToBool((- bool))' in IN2 laden
OPLUS ACC IN2;                         # '!(ToBool((- bool)))' in ACC laden
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Logische unäre Verknüpfung 'Not(ToBool((- bool)))' Ende
LOADIN SP ACC 2;                       # Wert von 'Not(((1 - 1) < 12))' in ACC laden
LOADIN SP IN2 1;                       # Wert von 'Not(ToBool((- bool)))' in IN2 laden
AND ACC IN2;                           # '(Not(((1 - 1) < 12)) && Not(ToBool((- bool))))' in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logische binäre Verknüpfung '(Not(((1 - 1) < 12)) && Not(ToBool((- bool))))' Ende
LOADI ACC 0;                           # '0' in ACC laden
LOADIN SP IN2 1;                       # Wert von 'e1' in IN2 laden
SUB ACC IN2;                           # '(0 - e1)' in ACC laden
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Arithmetische unäre Operation '(- (Not(((1 - 1) < 12)) && Not(ToBool((- bool)))))' Ende
LOADI ACC 0;                           # '0' in ACC laden
LOADIN SP IN2 1;                       # Wert von 'e1' in IN2 laden
SUB ACC IN2;                           # '(0 - e1)' in ACC laden
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Arithmetische unäre Operation '(- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool))))))' Ende
LOADIN SP ACC 1;                       # Wert von '(- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool))))))' in ACC laden
JUMP== 3;                              # Überspringe 2 Befehle, wenn '(- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool))))))' den Wert '0' hat
LOADI ACC 1;
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Logischer Wahrheitswert aus arithmetischem Ausdruck 'ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool)))))))' Ende
LOADI ACC 1;                           # '1' in ACC laden
LOADIN SP IN2 1;                       # Wert von 'ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool)))))))' in IN2 laden
OPLUS ACC IN2;                         # '!(ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool))))))))' in ACC laden
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Logische unäre Verknüpfung 'Not(ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool))))))))' Ende
LOADI ACC 1;                           # '1' in ACC laden
LOADIN SP IN2 1;                       # Wert von 'Not(ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool))))))))' in IN2 laden
OPLUS ACC IN2;                         # '!(Not(ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool)))))))))' in ACC laden
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Logische unäre Verknüpfung 'Not(Not(ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool)))))))))' Ende
LOADIN SP ACC 1;                       # Wert von 'Not(Not(ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool)))))))))' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Implizite Konversion von 'int' zu 'char' Start
LOADI IN1 255;                         # Bitmaske '00000000_00000000_00000000_11111111' für char Datentyp erstellen
AND ACC IN1;                           # Wo in der Bitmaske eine '0' ist, werden die Bits ebenfalls zu '0'
LOADI IN2 128;                         # Bitvektor '__000000_00000000_10000000' laden
AND ACC IN1;                           # Testen, ob Zahl negativ, wenn sie nur 8-Bit lang wäre
JUMP== 3;                              # Signextension für negative Zahl überspringen, wenn Zahl nicht negativ ist
LOADI IN1 -256;                        # Bitsmaske '11111111_11111111_11111111_00000000' für signextension erstellen
OR ACC IN1;                            # Wo in der Bitmaske eine '1' ist, werden die Bits ebenfallls zu '1'
# Implizite Konversion von 'int' zu 'char' Ende
STORE ACC 129;                         # Wert 'Not(Not(ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool)))))))))' in Variable 'var' speichern
# Zuweisung '((char var) = Not(Not(ToBool((- (- (Not(((1 - 1) < 12)) && Not(ToBool((- bool))))))))))' Ende
JUMP 0;
# Main Funktion '(void main ((char bool) = 0) ... )' Ende
# File 'logic_not_and_minus_complex' Ende
