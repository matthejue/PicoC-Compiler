# File 'no_warning_atomic_assignment_int_variable' Start
# Main Funktion '(void main ((int car) = 128) ... )' Start
LOADI SP 256;
# Zuweisung '((int car) = 128)' Start
# Allokation '(int car)' Start
# Variable 'car' vom Typ 'int' mit Adresse '128' zur Symboltabelle hinzugef端gt
# Allokation '(int car)' Ende
# Arithmetischer Operand '128' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 128;                         # Wert von '128' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '128' Ende
LOADIN SP ACC 1;                       # Wert von '128' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verk端rzen
STORE ACC 128;                         # Wert '128' in Variable 'car' speichern
# Zuweisung '((int car) = 128)' Ende
# Zuweisung '((int var) = car)' Start
# Allokation '(int var)' Start
# Variable 'var' vom Typ 'int' mit Adresse '129' zur Symboltabelle hinzugef端gt
# Allokation '(int var)' Ende
# Arithmetischer Operand 'car' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 128;                          # Wert von 'car' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand 'car' Ende
LOADIN SP ACC 1;                       # Wert von 'car' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verk端rzen
STORE ACC 129;                         # Wert 'car' in Variable 'var' speichern
# Zuweisung '((int var) = car)' Ende
JUMP 0;
# Main Funktion '(void main ((int car) = 128) ... )' Ende
# File 'no_warning_atomic_assignment_int_variable' Ende
