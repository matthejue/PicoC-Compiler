File 
  Name './tests/advanced_long_complex_condition_empty_branches.picoc_anf', 
  [
    Block 
      Name 'global.16', 
      [], 
    Block 
      Name 'main.15', 
      [
        Exp(Call(Name('input'), []))
        Assign(Global(Num('0')), Stack(Num('1')))
        Exp(Global(Num('0')))
        Exp(Num('42'))
        Exp(Atom(Stack(Num('2')), Lt('<'), Stack(Num('1'))))
        Exp(Global(Num('0')))
        Exp(UnOp(Minus('-'), Stack(Num('1'))))
        Exp(Num('42'))
        Exp(BinOp(Stack(Num('2')), Add('+'), Stack(Num('1'))))
        Exp(ToBool(Stack(Num('1'))))
        Exp(BinOp(Stack(Num('2')), LogicAnd(), Stack(Num('1'))))
        Exp(Num('1'))
        Exp(ToBool(Stack(Num('1'))))
        Exp(BinOp(Stack(Num('2')), LogicOr(), Stack(Num('1')))), 
        IfElse 
          Stack 
            Num '1', 
          [
            GoTo(Name('if.14'))
          ], 
          [
            GoTo(Name('else.13'))
          ]
      ], 
    Block 
      Name 'if.14', 
      [
        Exp(Num('42'))
        Exp(Call(Name('print'), [Stack(Num('1'))]))
        Exp(GoTo(Name('if_else_after.12')))
      ], 
    Block 
      Name 'else.13', 
      [
        Exp(GoTo(Name('if_else_after.12')))
      ], 
    Block 
      Name 'if_else_after.12', 
      [
        Exp(Global(Num('0')))
        Exp(Num('42'))
        Exp(Atom(Stack(Num('2')), Gt('>'), Stack(Num('1'))))
        Exp(Global(Num('0')))
        Exp(Num('42'))
        Exp(BinOp(Stack(Num('2')), Sub('-'), Stack(Num('1'))))
        Exp(ToBool(Stack(Num('1'))))
        Exp(Num('1'))
        Exp(ToBool(Stack(Num('1'))))
        Exp(BinOp(Stack(Num('2')), LogicOr(), Stack(Num('1'))))
        Exp(BinOp(Stack(Num('2')), LogicAnd(), Stack(Num('1')))), 
        IfElse 
          Stack 
            Num '1', 
          [
            GoTo(Name('if.11'))
          ], 
          [
            GoTo(Name('else.10'))
          ]
      ], 
    Block 
      Name 'if.11', 
      [
        Exp(GoTo(Name('if_else_after.9')))
      ], 
    Block 
      Name 'else.10', 
      [
        Exp(Num('42'))
        Exp(Call(Name('print'), [Stack(Num('1'))]))
        Exp(GoTo(Name('if_else_after.9')))
      ], 
    Block 
      Name 'if_else_after.9', 
      [
        Exp(Global(Num('0')))
        Exp(Num('1'))
        Exp(BinOp(Stack(Num('2')), Add('+'), Stack(Num('1'))))
        Exp(ToBool(Stack(Num('1'))))
        Exp(Global(Num('0')))
        Exp(Num('42'))
        Exp(Atom(Stack(Num('2')), NEq('!='), Stack(Num('1'))))
        Exp(Num('0'))
        Exp(ToBool(Stack(Num('1'))))
        Exp(BinOp(Stack(Num('2')), LogicOr(), Stack(Num('1'))))
        Exp(Num('1'))
        Exp(BinOp(Stack(Num('2')), Add('+'), Stack(Num('1'))))
        Exp(ToBool(Stack(Num('1'))))
        Exp(BinOp(Stack(Num('2')), LogicAnd(), Stack(Num('1')))), 
        IfElse 
          Stack 
            Num '1', 
          [
            GoTo(Name('if.8'))
          ], 
          [
            GoTo(Name('else.7'))
          ]
      ], 
    Block 
      Name 'if.8', 
      [
        Exp(Num('42'))
        Exp(Call(Name('print'), [Stack(Num('1'))]))
        Exp(GoTo(Name('if_else_after.6')))
      ], 
    Block 
      Name 'else.7', 
      [
        Exp(GoTo(Name('if_else_after.6')))
      ], 
    Block 
      Name 'if_else_after.6', 
      [
        Exp(Num('1')), 
        IfElse 
          Stack 
            Num '1', 
          [
            GoTo(Name('if.5'))
          ], 
          [
            GoTo(Name('else.4'))
          ]
      ], 
    Block 
      Name 'if.5', 
      [
        Exp(GoTo(Name('if_else_after.3')))
      ], 
    Block 
      Name 'else.4', 
      [
        Exp(GoTo(Name('if_else_after.3')))
      ], 
    Block 
      Name 'if_else_after.3', 
      [
        Exp(Num('0')), 
        IfElse 
          Stack 
            Num '1', 
          [
            GoTo(Name('if.2'))
          ], 
          [
            GoTo(Name('else.1'))
          ]
      ], 
    Block 
      Name 'if.2', 
      [
        Exp(GoTo(Name('if_else_after.0')))
      ], 
    Block 
      Name 'else.1', 
      [
        Exp(GoTo(Name('if_else_after.0')))
      ], 
    Block 
      Name 'if_else_after.0', 
      [
        Return(Empty())
      ]
  ]