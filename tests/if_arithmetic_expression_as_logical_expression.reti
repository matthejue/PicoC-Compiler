# File if_arithmetic_expression_as_logical_expression Start
# Main Funktion (void main ((int var) = 198123) ... ) Start
LOADI SP 200;
# Zuweisung ((int var) = 198123) Start
# Allokation (int var) Start
# Variable var vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int var) Ende
# Arithmetischer Operand 198123 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 198123;                      # Wert von 198123 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 198123 Ende
LOADIN SP ACC 1;                       # Wert von 198123 in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert von 198123 in Variable var speichern
# Zuweisung ((int var) = 198123) Ende
# If Statement If(ToBool((123 * var)) (var = 123)) Start
# Logischer Wahrheitswert aus arithmetischem Ausdruck ToBool((123 * var)) Start
# Arithmetische binäre Operation (123 * var) Start
# Arithmetischer Operand 123 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 123;                         # Wert von 123 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 123 Ende
# Arithmetischer Operand var Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von var in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand var Ende
LOADIN SP ACC 2;                       # Wert von 123 in ACC laden
LOADIN SP IN2 1;                       # Wert von var in IN2 laden
MULT ACC IN2;                          # Wert von (123 * var) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (123 * var) Ende
LOADIN SP ACC 1;                       # Wert von (123 * var) in ACC laden
JUMP== 3;                              # Überspringe 2 Befehle, wenn (123 * var) den Wert 0 hat
LOADI ACC 1;
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Logischer Wahrheitswert aus arithmetischem Ausdruck ToBool((123 * var)) Ende
LOADIN SP ACC 1;                       # Wert von ToBool((123 * var)) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
JUMP== 10;                             # Branch überspringen
# If-Branch
# Zuweisung (var = 123) Start
# Arithmetischer Operand var Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von var in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand var Ende
# Arithmetischer Operand 123 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 123;                         # Wert von 123 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 123 Ende
LOADIN SP ACC 1;                       # Wert von 123 in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert von 123 in Variable var speichern
# Zuweisung (var = 123) Ende
# If Statement If(ToBool((123 * var)) (var = 123)) Ende
JUMP 0;
# Main Funktion (void main ((int var) = 198123) ... ) Ende
# File if_arithmetic_expression_as_logical_expression Ende
