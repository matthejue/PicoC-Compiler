# File 'if_else_grammar' Start
# Main Funktion '(void main (char var) ... )' Start
LOADI SP 256;
# Allokation '(char var)' Start
# Variable 'var' vom Typ 'char' mit Adresse '128' zur Symboltabelle hinzugefügt
# Allokation '(char var)' Ende
# If und Else Statement 'IfElse((var >= 0) (var = 12) else (var = (var + 1)))' Start
# Logisches Atom '(var >= 0)' Start
# Arithmetischer Operand 'var' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 128;                          # Wert von 'var' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand 'var' Ende
# Arithmetischer Operand '0' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 0;                           # Wert von '0' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '0' Ende
LOADIN SP ACC 2;                       # Wert von 'var' in ACC laden
LOADIN SP IN2 1;                       # Wert von '0' in IN2 laden
SUB ACC IN2;                           # 'var - 0' in ACC laden
JUMP>= 3;                              # Ergebnis '1', wenn '(var >= 0)' erfüllt
LOADI ACC 0;                           # Ergebnis '0', wenn '(var >= 0)' nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis '1', wenn '(var >= 0)' wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom '(var >= 0)' Ende
LOADIN SP ACC 1;                       # Wert von '(var >= 0)' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
JUMP== 8;                              # Zu Else-Branch springen, wenn '(var >= 0)' nicht erfüllt
# If-Branch
# Zuweisung '(var = 12)' Start
# Arithmetischer Operand '12' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 12;                          # Wert von '12' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '12' Ende
LOADIN SP ACC 1;                       # Wert von '12' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 128;                         # Wert '12' in Variable 'var' speichern
# Zuweisung '(var = 12)' Ende
JUMP 23;                               # Else-Branch überspringen
# Else-Branch
# Zuweisung '(var = (var + 1))' Start
# Arithmetische binäre Operation '(var + 1)' Start
# Arithmetischer Operand 'var' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 128;                          # Wert von 'var' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand 'var' Ende
# Arithmetischer Operand '1' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 1;                           # Wert von '1' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '1' Ende
LOADIN SP ACC 2;                       # Wert von 'var' in ACC laden
LOADIN SP IN2 1;                       # Wert von '1' in IN2 laden
ADD ACC IN2;                           # Wert von '(var + 1)' in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation '(var + 1)' Ende
LOADIN SP ACC 1;                       # Wert von '(var + 1)' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Implizite Konversion von 'int' zu 'char' Start
LOADI IN1 255;                         # Bitmaske '00000000_00000000_00000000_11111111' für char Datentyp erstellen
AND ACC IN1;                           # Wo in der Bitmaske eine '0' ist, werden die Bits ebenfalls zu '0'
LOADI IN2 128;                         # Bitvektor '__000000_00000000_10000000' laden
AND ACC IN1;                           # Testen, ob Zahl negativ, wenn sie nur 8-Bit lang wäre
JUMP== 3;                              # Signextension für negative Zahl überspringen, wenn Zahl nicht negativ ist
LOADI IN1 -256;                        # Bitsmaske '11111111_11111111_11111111_00000000' für signextension erstellen
OR ACC IN1;                            # Wo in der Bitmaske eine '1' ist, werden die Bits ebenfallls zu '1'
# Implizite Konversion von 'int' zu 'char' Ende
STORE ACC 128;                         # Wert '(var + 1)' in Variable 'var' speichern
# Zuweisung '(var = (var + 1))' Ende
# If und Else Statement 'IfElse((var >= 0) (var = 12) else (var = (var + 1)))' Ende
JUMP 0;
# Main Funktion '(void main (char var) ... )' Ende
# File 'if_else_grammar' Ende
