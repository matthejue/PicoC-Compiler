# File uebungsblatt_5_aufgabe_3 Start
# Main Funktion (void main (int x) ... ) Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 5) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung ((const int z) = 5) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand 3 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 3;                           # Wert von 3 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 1;                       # Wert von 3 in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 101;                         # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 2) Start
# Arithmetischer Operand 2 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 2;                           # Wert von 2 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 1;                       # Wert von 2 in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# Zuweisung (x = (x + ((y * z) + 10))) Start
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand x Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von x in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand y Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 101;                          # Wert von y in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand z Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 5;                           # Wert von z in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
LOADIN SP ACC 2;                       # Wert von y in ACC laden
LOADIN SP IN2 1;                       # Wert von z in IN2 laden
MULT ACC IN2;                          # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 10;                          # Wert von 10 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;                       # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;                       # Wert von 10 in IN2 laden
ADD ACC IN2;                           # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
LOADIN SP ACC 2;                       # Wert von x in ACC laden
LOADIN SP IN2 1;                       # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;                           # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
LOADIN SP ACC 1;                       # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung (x = (x + ((y * z) + 10))) Ende
JUMP 0;
# Main Funktion (void main (int x) ... ) Ende
# File uebungsblatt_5_aufgabe_3 Ende
