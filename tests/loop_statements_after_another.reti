# File ./tests/loop_statements_after_another.picoc Start
# Main Funktion (void main ((int x) = 90) ... ) Start
LOADI SP 200;
# Zuweisung ((int x) = 90) Start
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Arithmetischer Operand 90 Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOADI ACC 90;                                                      # Wert von 90 in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 90 Ende
LOADIN SP ACC 1;                                                   # Wert von 90 in ACC laden
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
STORE ACC 100;                                                     # Wert von 90 in Variable x speichern
# Zuweisung ((int x) = 90) Ende
# While Statement While((x <= 100) (x = (x + 1))) Start
# Logisches Atom (x <= 100) Start
# Arithmetischer Operand x Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOAD ACC 100;                                                      # Wert von x in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 100 Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOADI ACC 100;                                                     # Wert von 100 in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 100 Ende
LOADIN SP ACC 2;                                                   # Wert von x in ACC laden
LOADIN SP IN2 1;                                                   # Wert von 100 in IN2 laden
SUB ACC IN2;                                                       # x - 100 in ACC laden
JUMP<= 3;                                                          # Ergebnis 1, wenn (x <= 100) erfüllt
LOADI ACC 0;                                                       # Ergebnis 0, wenn (x <= 100) nicht erfüllt
JUMP 2;
LOADI ACC 1;                                                       # Ergebnis 1, wenn x <= 100 wahr
STOREIN SP ACC 2;                                                  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
# Logisches Atom (x <= 100) Ende
LOADIN SP ACC 1;                                                   # Wert von (x <= 100) in ACC laden
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
JUMP== 19;                                                         # Statements überspringen, wenn (x <= 100) nicht erfüllt
# Zuweisung (x = (x + 1)) Start
# Arithmetischer Operand x Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOAD ACC 100;                                                      # Wert von x in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (x + 1) Start
# Arithmetischer Operand x Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOAD ACC 100;                                                      # Wert von x in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 1 Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOADI ACC 1;                                                       # Wert von 1 in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 1 Ende
LOADIN SP ACC 2;                                                   # Wert von x in ACC laden
LOADIN SP IN2 1;                                                   # Wert von 1 in IN2 laden
ADD ACC IN2;                                                       # Wert von (x + 1) in ACC laden
STOREIN SP ACC 2;                                                  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + 1) Ende
LOADIN SP ACC 1;                                                   # Wert von (x + 1) in ACC laden
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
STORE ACC 100;                                                     # Wert von (x + 1) in Variable x speichern
# Zuweisung (x = (x + 1)) Ende
JUMP -35;                                                          # Zurück zur Auswertung von (x <= 100)
# While Statement While((x <= 100) (x = (x + 1))) Ende
# Zuweisung (x = 10) Start
# Arithmetischer Operand x Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOAD ACC 100;                                                      # Wert von x in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOADI ACC 10;                                                      # Wert von 10 in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 1;                                                   # Wert von 10 in ACC laden
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
STORE ACC 100;                                                     # Wert von 10 in Variable x speichern
# Zuweisung (x = 10) Ende
# Do While DoWhile((x = (x + 1)) (x <= 100)) Start
# Zuweisung (x = (x + 1)) Start
# Arithmetischer Operand x Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOAD ACC 100;                                                      # Wert von x in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (x + 1) Start
# Arithmetischer Operand x Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOAD ACC 100;                                                      # Wert von x in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 1 Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOADI ACC 1;                                                       # Wert von 1 in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 1 Ende
LOADIN SP ACC 2;                                                   # Wert von x in ACC laden
LOADIN SP IN2 1;                                                   # Wert von 1 in IN2 laden
ADD ACC IN2;                                                       # Wert von (x + 1) in ACC laden
STOREIN SP ACC 2;                                                  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + 1) Ende
LOADIN SP ACC 1;                                                   # Wert von (x + 1) in ACC laden
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
STORE ACC 100;                                                     # Wert von (x + 1) in Variable x speichern
# Zuweisung (x = (x + 1)) Ende
# Logisches Atom (x <= 100) Start
# Arithmetischer Operand x Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOAD ACC 100;                                                      # Wert von x in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 100 Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOADI ACC 100;                                                     # Wert von 100 in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 100 Ende
LOADIN SP ACC 2;                                                   # Wert von x in ACC laden
LOADIN SP IN2 1;                                                   # Wert von 100 in IN2 laden
SUB ACC IN2;                                                       # x - 100 in ACC laden
JUMP<= 3;                                                          # Ergebnis 1, wenn (x <= 100) erfüllt
LOADI ACC 0;                                                       # Ergebnis 0, wenn (x <= 100) nicht erfüllt
JUMP 2;
LOADI ACC 1;                                                       # Ergebnis 1, wenn x <= 100 wahr
STOREIN SP ACC 2;                                                  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
# Logisches Atom (x <= 100) Ende
LOADIN SP ACC 1;                                                   # Wert von l1 in ACC laden
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
JUMP!= -(codelength(af) + codelength(l) + 2);                      # zurück zur Ausführung der Statements
# Do While DoWhile((x = (x + 1)) (x <= 100)) Ende
JUMP 0;
# Main Funktion (void main ((int x) = 90) ... ) Ende
# File ./tests/loop_statements_after_another.picoc Ende
