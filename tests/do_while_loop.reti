# File 'do_while_loop' Start
# Main Funktion '(void main ((int x) = 1) ... )' Start
LOADI SP 200;
# Zuweisung '((int x) = 1)' Start
# Allokation '(int x)' Start
# Variable 'x' vom Typ 'int' mit Adresse '100' zur Symboltabelle hinzugefügt
# Allokation '(int x)' Ende
# Arithmetischer Operand '1' Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOADI ACC 1;                                                       # Wert von '1' in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stack-Zelle
# Arithmetischer Operand '1' Ende
LOADIN SP ACC 1;                                                   # Wert von '1' in ACC laden
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
STORE ACC 100;                                                     # Wert '1' in Variable 'x' speichern
# Zuweisung '((int x) = 1)' Ende
# Allokation '(char y)' Start
# Variable 'y' vom Typ 'char' mit Adresse '101' zur Symboltabelle hinzugefügt
# Allokation '(char y)' Ende
# Do While 'DoWhile((y = (x + 1)) (y < 10))' Start
# Zuweisung '(y = (x + 1))' Start
# Arithmetische binäre Operation '(x + 1)' Start
# Arithmetischer Operand 'x' Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOAD ACC 100;                                                      # Wert von 'x' in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stack-Zelle
# Arithmetischer Operand 'x' Ende
# Arithmetischer Operand '1' Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOADI ACC 1;                                                       # Wert von '1' in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stack-Zelle
# Arithmetischer Operand '1' Ende
LOADIN SP ACC 2;                                                   # Wert von 'x' in ACC laden
LOADIN SP IN2 1;                                                   # Wert von '1' in IN2 laden
ADD ACC IN2;                                                       # Wert von '(x + 1)' in ACC laden
STOREIN SP ACC 2;                                                  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation '(x + 1)' Ende
LOADIN SP ACC 1;                                                   # Wert von '(x + 1)' in ACC laden
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
# Implizite Konversion von 'int' zu 'char' Start
LOADI IN1 255;                                                     # Bitmaske '00000000_00000000_00000000_11111111' für char Datentyp erstellen
AND ACC IN1;                                                       # Wo in der Bitmaske eine '0' ist, werden die Bits ebenfalls zu '0'
LOADI IN2 32768;                                                   # Bitvektor '10000000_00000000' laden
MULTI IN2 65536;                                                   # Bit '1' im Bitvektor um 16 Bits shiften: '10000000_00000000_00000000_00000000'
AND ACC IN1;                                                       # Testen, ob Zahl negativ ist
JUMP== 3;                                                          # Signextension für negative Zahl überspringen, wenn Zahl nicht negativ ist
LOADI IN1 -256;                                                    # Bitsmaske '11111111_11111111_11111111_00000000' für signextension erstellen
OR ACC IN1;                                                        # Wo in der Bitmaske eine '1' ist, werden die Bits ebenfallls zu '1'
# Implizite Konversion von 'int' zu 'char' Ende
STORE ACC 101;                                                     # Wert '(x + 1)' in Variable 'y' speichern
# Zuweisung '(y = (x + 1))' Ende
# Logisches Atom '(y < 10)' Start
# Arithmetischer Operand 'y' Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOAD ACC 101;                                                      # Wert von 'y' in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stack-Zelle
# Arithmetischer Operand 'y' Ende
# Arithmetischer Operand '10' Start
SUBI SP 1;                                                         # Stack um eine Zelle erweitern
LOADI ACC 10;                                                      # Wert von '10' in ACC laden
STOREIN SP ACC 1;                                                  # Wert in oberste Stack-Zelle
# Arithmetischer Operand '10' Ende
LOADIN SP ACC 2;                                                   # Wert von 'y' in ACC laden
LOADIN SP IN2 1;                                                   # Wert von '10' in IN2 laden
SUB ACC IN2;                                                       # 'y - 10' in ACC laden
JUMP< 3;                                                           # Ergebnis '1', wenn '(y < 10)' erfüllt
LOADI ACC 0;                                                       # Ergebnis '0', wenn '(y < 10)' nicht erfüllt
JUMP 2;
LOADI ACC 1;                                                       # Ergebnis '1', wenn '(y < 10)' wahr
STOREIN SP ACC 2;                                                  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
# Logisches Atom '(y < 10)' Ende
LOADIN SP ACC 1;                                                   # Wert von 'l1' in ACC laden
ADDI SP 1;                                                         # Stack um eine Zelle verkürzen
JUMP!= -(codelength(af) + codelength(l) + 2);                      # Zurück zur Ausführung der Statements
# Do While 'DoWhile((y = (x + 1)) (y < 10))' Ende
JUMP 0;
# Main Funktion '(void main ((int x) = 1) ... )' Ende
# File 'do_while_loop' Ende
