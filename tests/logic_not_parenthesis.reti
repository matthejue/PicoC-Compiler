# File logic_not_parenthesis Start
# Main Funktion (void main ((char bool) = 1) ... ) Start
LOADI SP 200;
# Zuweisung ((char bool) = 1) Start
# Allokation (char bool) Start
# Variable bool vom Typ char mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (char bool) Ende
# Arithmetischer Operand 1 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 1;                           # Wert von 1 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 1 Ende
LOADIN SP ACC 1;                       # Wert von 1 in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert von 1 in Variable bool speichern
# Zuweisung ((char bool) = 1) Ende
# Zuweisung ((char var) = (((ToBool(1) || ToBool(bool)) && (12 < (4 + 1))))) Start
# Allokation (char var) Start
# Variable var vom Typ char mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (char var) Ende
# Logische unäre Verknüpfung (((ToBool(1) || ToBool(bool)) && (12 < (4 + 1)))) Start
# Logische binäre Verknüpfung ((ToBool(1) || ToBool(bool)) && (12 < (4 + 1))) Start
# Logische binäre Verknüpfung (ToBool(1) || ToBool(bool)) Start
# Logischer Wahrheitswert aus arithmetischem Ausdruck ToBool(1) Start
# Arithmetischer Operand 1 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 1;                           # Wert von 1 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 1 Ende
LOADIN SP ACC 1;                       # Wert von 1 in ACC laden
JUMP== 3;                              # Überspringe 2 Befehle, wenn 1 den Wert 0 hat
LOADI ACC 1;
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Logischer Wahrheitswert aus arithmetischem Ausdruck ToBool(1) Ende
# Logischer Wahrheitswert aus arithmetischem Ausdruck ToBool(bool) Start
# Arithmetischer Operand bool Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von bool in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand bool Ende
LOADIN SP ACC 1;                       # Wert von bool in ACC laden
JUMP== 3;                              # Überspringe 2 Befehle, wenn bool den Wert 0 hat
LOADI ACC 1;
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Logischer Wahrheitswert aus arithmetischem Ausdruck ToBool(bool) Ende
LOADIN SP ACC 2;                       # Wert von ToBool(1) in ACC laden
LOADIN SP IN2 1;                       # Wert von ToBool(bool) in IN2 laden
OR ACC IN2;                            # (ToBool(1) || ToBool(bool)) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logische binäre Verknüpfung (ToBool(1) || ToBool(bool)) Ende
# Logisches Atom (12 < (4 + 1)) Start
# Arithmetischer Operand 12 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 12;                          # Wert von 12 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 12 Ende
# Arithmetische binäre Operation (4 + 1) Start
# Arithmetischer Operand 4 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 4;                           # Wert von 4 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 4 Ende
# Arithmetischer Operand 1 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 1;                           # Wert von 1 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 1 Ende
LOADIN SP ACC 2;                       # Wert von 4 in ACC laden
LOADIN SP IN2 1;                       # Wert von 1 in IN2 laden
ADD ACC IN2;                           # Wert von (4 + 1) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (4 + 1) Ende
LOADIN SP ACC 2;                       # Wert von 12 in ACC laden
LOADIN SP IN2 1;                       # Wert von (4 + 1) in IN2 laden
SUB ACC IN2;                           # 12 - (4 + 1) in ACC laden
JUMP< 3;                               # Ergebnis 1, wenn (12 < (4 + 1)) erfüllt
LOADI ACC 0;                           # Ergebnis 0, wenn (12 < (4 + 1)) nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis 1, wenn 12 < (4 + 1) wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom (12 < (4 + 1)) Ende
LOADIN SP ACC 2;                       # Wert von (ToBool(1) || ToBool(bool)) in ACC laden
LOADIN SP IN2 1;                       # Wert von (12 < (4 + 1)) in IN2 laden
AND ACC IN2;                           # ((ToBool(1) || ToBool(bool)) && (12 < (4 + 1))) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logische binäre Verknüpfung ((ToBool(1) || ToBool(bool)) && (12 < (4 + 1))) Ende
LOADI ACC 1;                           # 1 in ACC laden
LOADIN SP IN2 1;                       # Wert von ((ToBool(1) || ToBool(bool)) && (12 < (4 + 1))) in IN2 laden
OPLUS ACC IN2;                         # !(((ToBool(1) || ToBool(bool)) && (12 < (4 + 1)))) in ACC laden
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Logische unäre Verknüpfung (((ToBool(1) || ToBool(bool)) && (12 < (4 + 1)))) Ende
LOADIN SP ACC 1;                       # Wert von (((ToBool(1) || ToBool(bool)) && (12 < (4 + 1)))) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 101;                         # Wert von (((ToBool(1) || ToBool(bool)) && (12 < (4 + 1)))) in Variable var speichern
# Zuweisung ((char var) = (((ToBool(1) || ToBool(bool)) && (12 < (4 + 1))))) Ende
JUMP 0;
# Main Funktion (void main ((char bool) = 1) ... ) Ende
# File logic_not_parenthesis Ende
