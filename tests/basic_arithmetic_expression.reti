# File basic_arithmetic_expression Start
# Main Funktion (void main ((char var) = (12 - 374))) Start
LOADI SP 200;
# Zuweisung ((char var) = (12 - 374)) Start
# Allokation (char var) Start
# Variable var vom Typ char mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (char var) Ende
# Arithmetische binäre Operation (12 - 374) Start
# Arithmetischer Operand 12 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 12;                          # Wert von 12 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 12 Ende
# Arithmetischer Operand 374 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 374;                         # Wert von 374 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 374 Ende
LOADIN SP ACC 2;                       # Wert von 12 in ACC laden
LOADIN SP IN2 1;                       # Wert von 374 in IN2 laden
SUB ACC IN2;                           # Wert von (12 - 374) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (12 - 374) Ende
LOADIN SP ACC 1;                       # Wert von (12 - 374) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
LOADI IN1 255;                         # Bitmaske 1 für char Datentyp erstellen
AND ACC IN1;                           # Wo in der Bitmaske eine 0 ist, werden die Bits ebenfalls zu 0
LOADI IN2 32768;                       # Bitvektor 10000000_00000000 laden
MULTI IN2 65536;                       # Bit 1 im Bitvektor um 16 Bits shiften: 10000000_00000000_00000000_00000000
ANDI ACC IN1;                          # Testen, ob Zahl negativ ist
JUMP== 3;                              # Signextension für negative Zahl überspringen, wenn Zahl positiv ist
LOADI IN1 -256;                        # Bitsmaske 2, die überall dort eine 1 hat, wo Bitmaske 1 eine 0 hat
OR ACC IN1;                            # Wo in der Bitmaske eine 1 ist, werden die Bits ebenfallls zu 1
STORE ACC 100;                         # Wert von (12 - 374) in Variable var speichern
# Zuweisung ((char var) = (12 - 374)) Ende
JUMP 0;
# Main Funktion (void main ((char var) = (12 - 374))) Ende
# File basic_arithmetic_expression Ende
