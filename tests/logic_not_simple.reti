# File logic_not_simple Start
# Main Funktion (void main ((char var) = Not(ToBool((- 10))))) Start
LOADI SP 200;
# Zuweisung ((char var) = Not(ToBool((- 10)))) Start
# Allokation (char var) Start
# Variable var vom Typ char mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (char var) Ende
# Logische unäre Verknüpfung Not(ToBool((- 10))) Start
# Logischer Wahrheitswert aus arithmetischem Ausdruck ToBool((- 10)) Start
# Arithmetische unäre Operation (- 10) Start
# Arithmetischer Operand 10 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 10;                          # Wert von 10 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADI ACC 0;                           # 0 in ACC laden
LOADIN SP IN2 1;                       # Wert von e1 in IN2 laden
SUB ACC IN2;                           # (0 - e1) in ACC laden
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Arithmetische unäre Operation (- 10) Ende
LOADIN SP ACC 1;                       # Wert von (- 10) in ACC laden
JUMP== 3;                              # Überspringe 2 Befehle, wenn (- 10) den Wert 0 hat
LOADI ACC 1;
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Logischer Wahrheitswert aus arithmetischem Ausdruck ToBool((- 10)) Ende
LOADI ACC 1;                           # 1 in ACC laden
LOADIN SP IN2 1;                       # Wert von ToBool((- 10)) in IN2 laden
OPLUS ACC IN2;                         # !(ToBool((- 10))) in ACC laden
STOREIN SP ACC 1;                      # Ergebnis in oberste Stack-Zelle
# Logische unäre Verknüpfung Not(ToBool((- 10))) Ende
LOADIN SP ACC 1;                       # Wert von 'Not(ToBool((- 10)))' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Implizite Konversion von int zu char Start
LOADI IN1 255;                         # Bitmaske '00000000_00000000_00000000_11111111' für char Datentyp erstellen
AND ACC IN1;                           # Wo in der Bitmaske eine 0 ist, werden die Bits ebenfalls zu 0
LOADI IN2 32768;                       # Bitvektor '10000000_00000000' laden
MULTI IN2 65536;                       # Bit 1 im Bitvektor um 16 Bits shiften: '10000000_00000000_00000000_00000000'
AND ACC IN1;                           # Testen, ob Zahl negativ ist
JUMP== 3;                              # Signextension für negative Zahl überspringen, wenn Zahl nicht negativ ist
LOADI IN1 -256;                        # Bitsmaske '11111111_11111111_11111111_00000000' für signextension erstellen
OR ACC IN1;                            # Wo in der Bitmaske eine 1 ist, werden die Bits ebenfallls zu 1
# Implizite Konversion von int zu char Ende
STORE ACC 100;                         # Wert 'Not(ToBool((- 10)))' in Variable 'var' speichern
# Zuweisung ((char var) = Not(ToBool((- 10)))) Ende
JUMP 0;
# Main Funktion (void main ((char var) = Not(ToBool((- 10))))) Ende
# File logic_not_simple Ende
