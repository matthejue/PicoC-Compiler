# File 'warning_multi_assignment_char_int' Start
# Main Funktion '(void main (int var2) ... )' Start
LOADI SP 256;
# Allokation '(int var2)' Start
# Variable 'var2' vom Typ 'int' mit Adresse '128' zur Symboltabelle hinzugefügt
# Allokation '(int var2)' Ende
# Zuweisung '((char var) = (var2 = 2147483647))' Start
# Allokation '(char var)' Start
# Variable 'var' vom Typ 'char' mit Adresse '129' zur Symboltabelle hinzugefügt
# Allokation '(char var)' Ende
# Zuweisung '(var2 = 2147483647)' Start
# Arithmetischer Operand '2147483647' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 32767;                       # Higher Bits in ACC laden: '0000000000000000_0111111111111111'
MULTI ACC 65536;                       # Higher Bits um 16 Bits shiften
ORI ACC 65535;                         # Lower Bits in ACC einfügen: '0111111111111111_1111111111111111'
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '2147483647' Ende
LOADIN SP ACC 1;                       # Wert von '2147483647' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 128;                         # Wert '2147483647' in Variable 'var2' speichern
# Zuweisung '(var2 = 2147483647)' Ende
# Implizite Konversion von 'int' zu 'char' Start
LOADI IN1 255;                         # Bitmaske '00000000_00000000_00000000_11111111' für char Datentyp erstellen
AND ACC IN1;                           # Wo in der Bitmaske eine '0' ist, werden die Bits ebenfalls zu '0'
LOADI IN2 128;                         # Bitvektor '__000000_00000000_10000000' laden
AND ACC IN1;                           # Testen, ob Zahl negativ, wenn sie nur 8-Bit lang wäre
JUMP== 3;                              # Signextension für negative Zahl überspringen, wenn Zahl nicht negativ ist
LOADI IN1 -256;                        # Bitsmaske '11111111_11111111_11111111_00000000' für signextension erstellen
OR ACC IN1;                            # Wo in der Bitmaske eine '1' ist, werden die Bits ebenfallls zu '1'
# Implizite Konversion von 'int' zu 'char' Ende
STORE ACC 129;                         # Wert '(var2 = 2147483647)' in Variable 'var' speichern
# Zuweisung '((char var) = (var2 = 2147483647))' Ende
JUMP 0;
# Main Funktion '(void main (int var2) ... )' Ende
# File 'warning_multi_assignment_char_int' Ende
