# File error_multi_assignment_not_definined Start
# Main Funktion (void main (char var1) ... ) Start
LOADI SP 200;
# Allokation (char var1) Start
# Variable var1 vom Typ char mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (char var1) Ende
# Zuweisung ((int var3) = (var2 = (var1 = (1 + 1)))) Start
# Allokation (int var3) Start
# Variable var3 vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int var3) Ende
# Zuweisung (var2 = (var1 = (1 + 1))) Start
# Zuweisung (var1 = (1 + 1)) Start
# Arithmetische binäre Operation (1 + 1) Start
# Arithmetischer Operand 1 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 1;                           # Wert von 1 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 1 Ende
# Arithmetischer Operand 1 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 1;                           # Wert von 1 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 1 Ende
LOADIN SP ACC 2;                       # Wert von 1 in ACC laden
LOADIN SP IN2 1;                       # Wert von 1 in IN2 laden
ADD ACC IN2;                           # Wert von (1 + 1) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (1 + 1) Ende
LOADIN SP ACC 1;                       # Wert von (1 + 1) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
LOADI IN1 255;                         # Bitmaske 1 für char Datentyp erstellen
AND ACC IN1;                           # Wo in der Bitmaske eine 0 ist, werden die Bits ebenfalls zu 0
LOADI IN2 32768;                       # Bitvektor 10000000_00000000 laden
MULTI IN2 65536;                       # Bit 1 im Bitvektor um 16 Bits shiften: 10000000_00000000_00000000_00000000
ANDI ACC IN1;                          # Testen, ob Zahl negativ ist
JUMP== 3;                              # Signextension für negative Zahl überspringen, wenn Zahl positiv ist
LOADI IN1 -256;                        # Bitsmaske 2, die überall dort eine 1 hat, wo Bitmaske 1 eine 0 hat
OR ACC IN1;                            # Wo in der Bitmaske eine 1 ist, werden die Bits ebenfallls zu 1
STORE ACC 100;                         # Wert von (1 + 1) in Variable var1 speichern
# Zuweisung (var1 = (1 + 1)) Ende
STORE ACC 100;                         # Wert von (var1 = (1 + 1)) in Variable var2 speichern
# Zuweisung (var2 = (var1 = (1 + 1))) Ende
# Zuweisung ((int var3) = (var2 = (var1 = (1 + 1)))) Ende
JUMP 0;
# Main Funktion (void main (char var1) ... ) Ende
# File error_multi_assignment_not_definined Ende
