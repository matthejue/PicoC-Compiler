# File ./tests/uebungsblatt_6_aufgabe_1.picoc Start
# Main Funktion (void main (int x) ... ) Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 2) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 2 zugewiesen
# Zuweisung ((const int z) = 2) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand 3 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 3;                           # Wert von 3 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 1;                       # Wert von 3 in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 101;                         # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 15) Start
# Arithmetischer Operand 15 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 15;                          # Wert von 15 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 15 Ende
LOADIN SP ACC 1;                       # Wert von 15 in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert von 15 in Variable x speichern
# Zuweisung (x = 15) Ende
# While Statement While((x >= (z * y)) (x = (x - 3))) Start
# Logisches Atom (x >= (z * y)) Start
# Arithmetischer Operand x Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von x in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (z * y) Start
# Arithmetischer Operand z Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 2;                           # Wert von z in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
# Arithmetischer Operand y Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 101;                          # Wert von y in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
LOADIN SP ACC 2;                       # Wert von z in ACC laden
LOADIN SP IN2 1;                       # Wert von y in IN2 laden
MULT ACC IN2;                          # Wert von (z * y) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (z * y) Ende
LOADIN SP ACC 2;                       # Wert von x in ACC laden
LOADIN SP IN2 1;                       # Wert von (z * y) in IN2 laden
SUB ACC IN2;                           # x - (z * y) in ACC laden
JUMP>= 3;                              # Ergebnis 1, wenn (x >= (z * y)) erfüllt
LOADI ACC 0;                           # Ergebnis 0, wenn (x >= (z * y)) nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis 1, wenn x >= (z * y) wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom (x >= (z * y)) Ende
LOADIN SP ACC 1;                       # Wert von (x >= (z * y)) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
JUMP== 16;                             # Statements überspringen, wenn (x >= (z * y)) nicht erfüllt
# Zuweisung (x = (x - 3)) Start
# Arithmetische binäre Operation (x - 3) Start
# Arithmetischer Operand x Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von x in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 3 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 3;                           # Wert von 3 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 2;                       # Wert von x in ACC laden
LOADIN SP IN2 1;                       # Wert von 3 in IN2 laden
SUB ACC IN2;                           # Wert von (x - 3) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x - 3) Ende
LOADIN SP ACC 1;                       # Wert von (x - 3) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert von (x - 3) in Variable x speichern
# Zuweisung (x = (x - 3)) Ende
JUMP -40;                              # Zurück zur Auswertung von (x >= (z * y))
# While Statement While((x >= (z * y)) (x = (x - 3))) Ende
JUMP 0;
# Main Funktion (void main (int x) ... ) Ende
# File ./tests/uebungsblatt_6_aufgabe_1.picoc Ende
