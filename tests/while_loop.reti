# File 'while_loop' Start
# Main Funktion '(void main ((char x) = 10) ... )' Start
LOADI SP 200;
# Zuweisung '((char x) = 10)' Start
# Allokation '(char x)' Start
# Variable 'x' vom Typ 'char' mit Adresse '100' zur Symboltabelle hinzugefügt
# Allokation '(char x)' Ende
# Arithmetischer Operand '10' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 10;                          # Wert von '10' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '10' Ende
LOADIN SP ACC 1;                       # Wert von '10' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert '10' in Variable 'x' speichern
# Zuweisung '((char x) = 10)' Ende
# While Statement 'While((x < 12) (x = (x + 1)))' Start
# Logisches Atom '(x < 12)' Start
# Arithmetischer Operand 'x' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von 'x' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand 'x' Ende
# Arithmetischer Operand '12' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 12;                          # Wert von '12' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '12' Ende
LOADIN SP ACC 2;                       # Wert von 'x' in ACC laden
LOADIN SP IN2 1;                       # Wert von '12' in IN2 laden
SUB ACC IN2;                           # 'x - 12' in ACC laden
JUMP< 3;                               # Ergebnis '1', wenn '(x < 12)' erfüllt
LOADI ACC 0;                           # Ergebnis '0', wenn '(x < 12)' nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis '1', wenn '(x < 12)' wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom '(x < 12)' Ende
LOADIN SP ACC 1;                       # Wert von '(x < 12)' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
JUMP== 24;                             # Statements überspringen, wenn '(x < 12)' nicht erfüllt
# Zuweisung '(x = (x + 1))' Start
# Arithmetische binäre Operation '(x + 1)' Start
# Arithmetischer Operand 'x' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von 'x' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand 'x' Ende
# Arithmetischer Operand '1' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 1;                           # Wert von '1' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '1' Ende
LOADIN SP ACC 2;                       # Wert von 'x' in ACC laden
LOADIN SP IN2 1;                       # Wert von '1' in IN2 laden
ADD ACC IN2;                           # Wert von '(x + 1)' in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation '(x + 1)' Ende
LOADIN SP ACC 1;                       # Wert von '(x + 1)' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Implizite Konversion von 'int' zu 'char' Start
LOADI IN1 255;                         # Bitmaske '00000000_00000000_00000000_11111111' für char Datentyp erstellen
AND ACC IN1;                           # Wo in der Bitmaske eine '0' ist, werden die Bits ebenfalls zu '0'
LOADI IN2 32768;                       # Bitvektor '10000000_00000000' laden
MULTI IN2 65536;                       # Bit '1' im Bitvektor um 16 Bits shiften: '10000000_00000000_00000000_00000000'
AND ACC IN1;                           # Testen, ob Zahl negativ ist
JUMP== 3;                              # Signextension für negative Zahl überspringen, wenn Zahl nicht negativ ist
LOADI IN1 -256;                        # Bitsmaske '11111111_11111111_11111111_00000000' für signextension erstellen
OR ACC IN1;                            # Wo in der Bitmaske eine '1' ist, werden die Bits ebenfallls zu '1'
# Implizite Konversion von 'int' zu 'char' Ende
STORE ACC 100;                         # Wert '(x + 1)' in Variable 'x' speichern
# Zuweisung '(x = (x + 1))' Ende
JUMP -40;                              # Zurück zur Auswertung von '(x < 12)'
# While Statement 'While((x < 12) (x = (x + 1)))' Ende
JUMP 0;
# Main Funktion '(void main ((char x) = 10) ... )' Ende
# File 'while_loop' Ende
