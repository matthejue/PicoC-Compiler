# File while_loop Start
# Main Funktion (void main ((char x) = 10) ... ) Start
LOADI SP 200;
# Zuweisung ((char x) = 10) Start
# Allokation (char x) Start
# Variable x vom Typ char mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (char x) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 10;                          # Wert von 10 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 1;                       # Wert von 10 in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert von 10 in Variable x speichern
# Zuweisung ((char x) = 10) Ende
# While Statement While((x < 12) (x = (x + 1))) Start
# Logisches Atom (x < 12) Start
# Arithmetischer Operand x Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von x in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 12 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 12;                          # Wert von 12 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 12 Ende
LOADIN SP ACC 2;                       # Wert von x in ACC laden
LOADIN SP IN2 1;                       # Wert von 12 in IN2 laden
SUB ACC IN2;                           # x - 12 in ACC laden
JUMP< 3;                               # Ergebnis 1, wenn (x < 12) erfüllt
LOADI ACC 0;                           # Ergebnis 0, wenn (x < 12) nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis 1, wenn x < 12 wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom (x < 12) Ende
LOADIN SP ACC 1;                       # Wert von (x < 12) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
JUMP== 19;                             # Statements überspringen, wenn (x < 12) nicht erfüllt
# Zuweisung (x = (x + 1)) Start
# Arithmetischer Operand x Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von x in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (x + 1) Start
# Arithmetischer Operand x Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von x in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 1 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 1;                           # Wert von 1 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 1 Ende
LOADIN SP ACC 2;                       # Wert von x in ACC laden
LOADIN SP IN2 1;                       # Wert von 1 in IN2 laden
ADD ACC IN2;                           # Wert von (x + 1) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + 1) Ende
LOADIN SP ACC 1;                       # Wert von (x + 1) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert von (x + 1) in Variable x speichern
# Zuweisung (x = (x + 1)) Ende
JUMP -35;                              # Zurück zur Auswertung von (x < 12)
# While Statement While((x < 12) (x = (x + 1))) Ende
JUMP 0;
# Main Funktion (void main ((char x) = 10) ... ) Ende
# File while_loop Ende
