# File ./tests/while_generation.picoc Start
# Main Funktion (void main ((int i) = 0) ... ) Start
LOADI SP 200;
# Zuweisung ((int i) = 0) Start
# Allokation (int i) Start
# Variable i vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int i) Ende
# Arithmetischer Operand 0 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 0;                           # Wert von 0 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 0 Ende
LOADIN SP ACC 1;                       # Wert von 0 in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert von 0 in Variable (int i) speichern
# Zuweisung ((int i) = 0) Ende
# Zuweisung ((int x) = 1) Start
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Arithmetischer Operand 1 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 1;                           # Wert von 1 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 1 Ende
LOADIN SP ACC 1;                       # Wert von 1 in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 101;                         # Wert von 1 in Variable (int x) speichern
# Zuweisung ((int x) = 1) Ende
# While Statement While((i < 10) If((i == 5) (x = 2)) ... ) Start
# Logisches Atom (i < 10) Start
# Arithmetischer Operand i Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von i in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand i Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 10;                          # Wert von 10 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;                       # Wert von i in ACC laden
LOADIN SP IN2 1;                       # Wert von 10 in IN2 laden
SUB ACC IN2;                           # i - 10 in ACC laden
JUMP< 3;                               # Ergebnis 1, wenn (i < 10) erfüllt
LOADI ACC 0;                           # Ergebnis 0, wenn (i < 10) nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis 1, wenn i < 10 wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom (i < 10) Ende
LOADIN SP ACC 1;                       # Wert von (i < 10) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
JUMP== 40;                             # Statements überspringen, wenn (i < 10) nicht erfüllt
# If Statement If((i == 5) (x = 2)) Start
# Logisches Atom (i == 5) Start
# Arithmetischer Operand i Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von i in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand i Ende
# Arithmetischer Operand 5 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 5;                           # Wert von 5 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 5 Ende
LOADIN SP ACC 2;                       # Wert von i in ACC laden
LOADIN SP IN2 1;                       # Wert von 5 in IN2 laden
SUB ACC IN2;                           # i - 5 in ACC laden
JUMP== 3;                              # Ergebnis 1, wenn (i == 5) erfüllt
LOADI ACC 0;                           # Ergebnis 0, wenn (i == 5) nicht erfüllt
JUMP 2;
LOADI ACC 1;                           # Ergebnis 1, wenn i == 5 wahr
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Logisches Atom (i == 5) Ende
LOADIN SP ACC 1;                       # Wert von (i == 5) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
JUMP== 7;                              # Branch überspringen
# If-Branch
# Zuweisung (x = 2) Start
# Arithmetischer Operand 2 Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 2;                           # Wert von 2 in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 1;                       # Wert von 2 in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 101;                         # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# If Statement If((i == 5) (x = 2)) Ende
# Zuweisung (i = (i + x)) Start
# Arithmetische binäre Operation (i + x) Start
# Arithmetischer Operand i Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von i in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand i Ende
# Arithmetischer Operand x Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 101;                          # Wert von x in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
LOADIN SP ACC 2;                       # Wert von i in ACC laden
LOADIN SP IN2 1;                       # Wert von x in IN2 laden
ADD ACC IN2;                           # Wert von (i + x) in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (i + x) Ende
LOADIN SP ACC 1;                       # Wert von (i + x) in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 100;                         # Wert von (i + x) in Variable i speichern
# Zuweisung (i = (i + x)) Ende
JUMP -56;                              # Zurück zur Auswertung von (i < 10)
# While Statement While((i < 10) If((i == 5) (x = 2)) ... ) Ende
# Zuweisung ((const int y) = (i % 10)) Start
# Allokation (const int y) Start
# Konstante y vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int y) Ende
# Zuweisung ((const int y) = (i % 10)) Ende
JUMP 0;
# Main Funktion (void main ((int i) = 0) ... ) Ende
# File ./tests/while_generation.picoc Ende
