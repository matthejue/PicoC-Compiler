# File 'precedence_3' Start
# Main Funktion '(void main (char cars) ... )' Start
LOADI SP 200;
# Allokation '(char cars)' Start
# Variable 'cars' vom Typ 'char' mit Adresse '100' zur Symboltabelle hinzugefügt
# Allokation '(char cars)' Ende
# Zuweisung '((int var) = (cars * (4 / 2)))' Start
# Allokation '(int var)' Start
# Variable 'var' vom Typ 'int' mit Adresse '101' zur Symboltabelle hinzugefügt
# Allokation '(int var)' Ende
# Arithmetische binäre Operation '(cars * (4 / 2))' Start
# Arithmetischer Operand 'cars' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOAD ACC 100;                          # Wert von 'cars' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand 'cars' Ende
# Arithmetische binäre Operation '(4 / 2)' Start
# Arithmetischer Operand '4' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 4;                           # Wert von '4' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '4' Ende
# Arithmetischer Operand '2' Start
SUBI SP 1;                             # Stack um eine Zelle erweitern
LOADI ACC 2;                           # Wert von '2' in ACC laden
STOREIN SP ACC 1;                      # Wert in oberste Stack-Zelle
# Arithmetischer Operand '2' Ende
LOADIN SP ACC 2;                       # Wert von '4' in ACC laden
LOADIN SP IN2 1;                       # Wert von '2' in IN2 laden
DIV ACC IN2;                           # Wert von '(4 / 2)' in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation '(4 / 2)' Ende
LOADIN SP ACC 2;                       # Wert von 'cars' in ACC laden
LOADIN SP IN2 1;                       # Wert von '(4 / 2)' in IN2 laden
MULT ACC IN2;                          # Wert von '(cars * (4 / 2))' in ACC laden
STOREIN SP ACC 2;                      # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                             # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation '(cars * (4 / 2))' Ende
LOADIN SP ACC 1;                       # Wert von '(cars * (4 / 2))' in ACC laden
ADDI SP 1;                             # Stack um eine Zelle verkürzen
STORE ACC 101;                         # Wert '(cars * (4 / 2))' in Variable 'var' speichern
# Zuweisung '((int var) = (cars * (4 / 2)))' Ende
JUMP 0;
# Main Funktion '(void main (char cars) ... )' Ende
# File 'precedence_3' Ende
