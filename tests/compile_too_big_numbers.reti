# File ./tests/compile_too_big_numbers.picoc Start
# Main Funktion (void main ((int car) = 2097152) ... ) Start
LOADI SP 200;
# Zuweisung ((int car) = 2097152) Start
# Allokation (int car) Start
# Variable car vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int car) Ende
# Arithmetischer Operand 2097152 Start
SUBI SP 1;                              # Stack um eine Zelle erweitern
LOADI ACC 32;                           # Higher Bits '0000000000100000' in ACC laden
MULTI ACC 65536;                        # Higher Bits um 16 Bits shiften
ORI ACC 0;                              # Lower Bits '0000000000000000' in ACC einfügen
STOREIN SP ACC 1;                       # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2097152 Ende
LOADIN SP ACC 1;                        # Wert von 2097152 in ACC laden
ADDI SP 1;                              # Stack um eine Zelle verkürzen
STORE ACC 100;                          # Wert von 2097152 in Variable (int car) speichern
# Zuweisung ((int car) = 2097152) Ende
# Zuweisung ((int var) = (2097151 & ((- 2097160) | car))) Start
# Allokation (int var) Start
# Variable var vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int var) Ende
# Arithmetische binäre Operation (2097151 & ((- 2097160) | car)) Start
# Arithmetischer Operand 2097151 Start
SUBI SP 1;                              # Stack um eine Zelle erweitern
LOADI ACC 2097151;                      # Wert von 2097151 in ACC laden
STOREIN SP ACC 1;                       # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2097151 Ende
# Arithmetische binäre Operation ((- 2097160) | car) Start
# Arithmetische unäre Operation (- 2097160) Start
# Arithmetischer Operand 2097160 Start
SUBI SP 1;                              # Stack um eine Zelle erweitern
LOADI ACC 32;                           # Higher Bits '0000000000100000' in ACC laden
MULTI ACC 65536;                        # Higher Bits um 16 Bits shiften
ORI ACC 8;                              # Lower Bits '0000000000001000' in ACC einfügen
STOREIN SP ACC 1;                       # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2097160 Ende
LOADI ACC 0;                            # 0 in ACC laden
LOADIN SP IN2 1;                        # Wert von e1 in IN2 laden
SUB ACC IN2;                            # (0 - e1) in ACC laden
STOREIN SP ACC 1;                       # Ergebnis in oberste Stack-Zelle
# Arithmetische unäre Operation (- 2097160) Ende
# Arithmetischer Operand car Start
SUBI SP 1;                              # Stack um eine Zelle erweitern
LOAD ACC 100;                           # Wert von car in ACC laden
STOREIN SP ACC 1;                       # Wert in oberste Stacke-Zelle
# Arithmetischer Operand car Ende
LOADIN SP ACC 2;                        # Wert von (- 2097160) in ACC laden
LOADIN SP IN2 1;                        # Wert von car in IN2 laden
OR ACC IN2;                             # Wert von ((- 2097160) | car) in ACC laden
STOREIN SP ACC 2;                       # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                              # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((- 2097160) | car) Ende
LOADIN SP ACC 2;                        # Wert von 2097151 in ACC laden
LOADIN SP IN2 1;                        # Wert von ((- 2097160) | car) in IN2 laden
AND ACC IN2;                            # Wert von (2097151 & ((- 2097160) | car)) in ACC laden
STOREIN SP ACC 2;                       # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;                              # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (2097151 & ((- 2097160) | car)) Ende
LOADIN SP ACC 1;                        # Wert von (2097151 & ((- 2097160) | car)) in ACC laden
ADDI SP 1;                              # Stack um eine Zelle verkürzen
STORE ACC 101;                          # Wert von (2097151 & ((- 2097160) | car)) in Variable (int var) speichern
# Zuweisung ((int var) = (2097151 & ((- 2097160) | car))) Ende
JUMP 0;
# Main Funktion (void main ((int car) = 2097152) ... ) Ende
# File ./tests/compile_too_big_numbers.picoc Ende
