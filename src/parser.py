class Parser:

    """Analyzes the syntactic structure of a token sequence generated by the
    Lexer using  k>1 lookahead tokens
    """

    def __init__(self, lexer, num_tks):
        """
        :lk_tokens: lookahead tokens
        :k: number of lookahead tokens
        :lkt_idx: lookahead token index

        """
        self.lexer = lexer
        self.lk_tokens = []
        self.num_tks = num_tks
        self.lkt_idx = 0
        for _ in range(k):
            self.next_token()

    def next_token(self):
        """fills next position in the lookahead tokenlist with token

        :returns: None

        """
        self.lk_tokens[self.lkt_idx] = lexer.next_token()
        self.lkt_idx = (self.lkt_idx + 1) % self.num_tks

    def LT(self, i):
        """Lookahead Token

        :returns: find out token looking ahead i tokens
        """
        return self.lk_tokens[(self.lk_idx + i - 1) % self.num_tks]

    def LTT(self, i):
        """Lookahead tokentype

        :returns: find out type locking ahead i tokens
        """
        return self.LKT(i).type

    def match(self, t):
        """Check if t is the next token in the lexer to match

        :t: possibly matching token
        :returns: TODO

        """
        if (self.LTT(1) == t):
            self.next_token()
        else:
            raise SyntaxError(t, self.LTT(1))
