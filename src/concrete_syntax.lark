// ----------------------------------------------------------------------------
// -                                   Lexer                                  -
// ----------------------------------------------------------------------------
// --------------------------------- L_Comment --------------------------------
COMMENT: "//" /[^\n]*/|"/*" /(.|\n)*?/ "*/"
// ---------------------------------- L_Arith ---------------------------------
DIG_NO_0: "1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
DIG_WITH_0: "0"|DIG_NO_0
NUM: "0"|DIG_NO_0 DIG_WITH_0*
LETTER: "a".."z"|"A".."Z"
CHAR: "'"LETTER"'"
NAME: (LETTER|"_")(LETTER|DIG_WITH_0|"_")*
UN_OP: "-"|"~"|"!"
PREC1_OP: "*"|"/"|"%"
PREC2_OP: "+"|"-"|"^"|"&"|"|"
// ---------------------------------- L_Logic ---------------------------------
// ! is new but gets added under L_Arith
RELATION: "=="|"!="|"<"|"<="|">"|">="
// ------------------------------ L_Assign_Alloc ------------------------------
SIZE_QUAL: "int"|"char"|"void"
// --------------------------------- L_Pointer --------------------------------
PNTR_PLUS: "+"
PNTR_MINUS: "-"
// ----------------------------------------------------------------------------
// -                                  Parser                                  -
// ----------------------------------------------------------------------------
// ---------------------------------- L_Arith ---------------------------------
input_odp: "input""("")"
?arith_opd: NAME|NUM|CHAR|input_odp|"("arith_exp_logic_exp")"|pntr_opd|array_subscr|struct_attr|fun_call
un_opd: UN_OP* arith_opd
arith_prec1: un_opd (PREC1_OP un_opd)*
arith_prec2: arith_prec1 (PREC2_OP arith_prec1)*
?arith_exp: arith_prec2
print_stmt: "print""("arith_exp")"";"
// ---------------------------------- L_Logic ---------------------------------
to_bool: arith_exp
?logic_opd: "("logic_exp")"|to_bool
logic_atom: logic_opd [RELATION logic_opd]
logic_and: logic_atom ("&&" logic_atom)*
logic_or: logic_and ("||" logic_and)*
?logic_exp: logic_or
?arith_exp_logic_exp: arith_exp|logic_exp
// ------------------------------ L_Assign_Alloc ------------------------------
?datatype: SIZE_QUAL|struct_spec
alloc: datatype pntr_decl
?alloc_stmt: alloc";"
var_assign: NAME "=" arith_exp_logic_exp";"
?assign_stmt: var_assign|deref_assign|subscr_assign|attribute_assign
init: alloc "=" arith_exp_logic_exp";"
const_init: "const" SIZE_QUAL NAME "=" NUM";"
?assign_alloc_stmt: alloc_stmt|assign_stmt|init|const_init|array_init|struct_init
// --------------------------------- L_Pointer --------------------------------
!pntr_deg: "*"*
pntr_decl: pntr_deg array_decl
?deref_opd: NAME|pntr_opd|array_subscr|struct_attr|fun_call
deref_simple: "*"deref_opd
deref_arith.9: "*"("("deref_opd PNTR_PLUS arith_exp")"|"("deref_opd PNTR_MINUS arith_exp")")
?deref: deref_simple|deref_arith
// if the type of the location is array, then the address of the location is used
var_ref: "&"NAME
deref_ref: "&"deref
?ref: var_ref|deref_ref|subscr_ref|attribute_ref
?pntr_opd: deref|ref
deref_assign: deref "=" arith_exp_logic_exp";"
// ---------------------------------- L_Array ---------------------------------
array_dims: ("["NUM"]")*
array_decl: NAME array_dims|"("pntr_decl")" array_dims
array_subscr: deref_opd"["arith_exp_logic_exp"]"
subscr_ref: "&"array_subscr
subscr_assign: array_subscr "=" arith_exp_logic_exp";"
?entry_subexp: arith_exp_logic_exp|array_subexps|struct_subexps
array_subexps: "{"entry_subexp("," entry_subexp)*"}"
array_init_dims: ("["NUM"]")+
array_init_decl: NAME array_dims
array_init: datatype array_init_decl "=" array_subexps";"
// --------------------------------- L_Struct ---------------------------------
struct_spec: "struct" NAME
struct_attr: NAME"."NAME
attribute_ref: "&"struct_attr
attribute_assign: struct_attr "=" arith_exp_logic_exp";"
struct_params: (datatype NAME";")+
struct_decl: "struct" NAME "{"struct_params"}"";"
struct_subexps: "{""."NAME"="entry_subexp ("," "."NAME"="entry_subexp)*"}"
struct_init: struct_spec NAME "=" struct_subexps
// --------------------------------- L_If_Else --------------------------------
if_: "if""("arith_exp_logic_exp")" "{" stmts "}"
if_else: "if""("arith_exp_logic_exp")" "{" stmts "}" "else" "{" stmts "}"|"if""("arith_exp_logic_exp")" "{" stmts "}" "else" exec_part
?if_else_stmt: if_|if_else
// ---------------------------------- L_Loop ----------------------------------
while_: "while""("arith_exp_logic_exp")" "{" stmts "}"
do_while: "do" "{" stmts "}" "while""("arith_exp_logic_exp")"[";"]
?loop_stmt: while_|do_while
// ---------------------------------- L_Stmt ----------------------------------
?decl_part: assign_alloc_stmt
?exec_part: print_stmt|assign_stmt|if_else_stmt|loop_stmt|fun_stmt
?stmts: decl_part* exec_part*
// ----------------------------------- L_Fun ----------------------------------
fun_call_args: [arith_exp_logic_exp("," arith_exp_logic_exp)*]
fun_call: NAME"("fun_call_args")"
fun_call_stmt: fun_call
fun_return: "return" [arith_exp_logic_exp]
?fun_stmt: fun_call_stmt|fun_return
fun_params: [datatype NAME("," datatype NAME)*]
fun_decl: datatype NAME"("fun_params")"";"
fun_def: datatype NAME"("fun_params")" "{" stmts "}"
// ---------------------------------- L_File ----------------------------------
?decl_def: struct_decl|fun_decl|fun_def
?decls_defs: decl_def*
file: NAME decls_defs
// ---------------------------------- L_Block ---------------------------------
// fun_def: datatype NAME"("[datatype NAME("," datatype NAME)*]")" "{" blocks "}"
block: NAME":" stmts
?blocks: block*
goto: "goto""("NAME")"


%import common.WS
%ignore WS
%ignore COMMENT
