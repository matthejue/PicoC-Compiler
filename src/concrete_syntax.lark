// ----------------------------------------------------------------------------
// -                                   Lexer                                  -
// ----------------------------------------------------------------------------
// --------------------------------- L_Comment --------------------------------
COMMENT: "//" /[^\n]*/|"/*" /(.|\n)*?/ "*/"
// ---------------------------------- L_Arith ---------------------------------
DIG_NO_0: "1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
DIG_WITH_0: "0"|DIG_NO_0
NUM: "0"|DIG_NO_0 DIG_WITH_0*
LETTER: "a".."z"|"A".."Z"
CHAR: "'"LETTER"'"
NAME: (LETTER|"_")(LETTER|DIG_WITH_0|"_")*
UNARY_OP: "-"|"~"
PREC1_OP: "*"|"/"|"%"
PREC2_OP: "+"|"-"|"^"|"&"|"|"
// ---------------------------------- L_Logic ---------------------------------
RELATION: "=="|"!="|"<"|"<="|">"|">="
// ------------------------------ L_Assign_Alloc ------------------------------
PRIM_SIZE_QUAL: "int"|"char"|"void"
// ----------------------------------------------------------------------------
// -                                  Parser                                  -
// ----------------------------------------------------------------------------
// ---------------------------------- L_Arith ---------------------------------
input_odp: "input""("")"
?arith_opd: NAME|NUM|CHAR|input_odp|"("logic_exp")"|logic_opd|pntr_opd|array_opd|struct_opd|fun_opd
unary_opd: UNARY_OP unary_opd | arith_opd
arith_prec1: unary_opd (PREC1_OP unary_opd)*
arith_prec2: arith_prec1 (PREC2_OP arith_prec1)*
arith_exp: arith_prec2
print_stmt: "print""("arith_exp")"";"
// ---------------------------------- L_Logic ---------------------------------
?logic_opd: "("logic_exp")"|arith_exp
logic_not: "!"logic_not | logic_opd
logic_atom: logic_not RELATION logic_not
logic_and: logic_atom ("&&" logic_atom)*
logic_or: logic_and ("||" logic_and)*
logic_exp: logic_or
// ------------------------------ L_Assign_Alloc ------------------------------
size_qual: PRIM_SIZE_QUAL|pntr_size_qual|array_size_qual|struct_size_qual|fun_size_qual
alloc: size_qual NAME";"
var_assign: NAME "=" logic_exp";"
assign: var_assign|pntr_assign|array_assign|struct_assign
init: size_qual NAME "=" logic_exp";"
const_init: "const" size_qual NAME "=" NUM";"
assign_alloc_stmt: alloc|assign|init|const_init
// --------------------------------- L_Pointer --------------------------------
pntr_size_qual: size_qual"*"
pntr_simple: arith_opd
pntr_arith: "("arith_opd"+"logic_exp")"|"("arith_opd"-"logic_exp")"
deref: "*"deref|"*"(pntr_simple|pntr_arith)
var_ref: "&"NAME
pntr_ref: "&"deref
ref: var_ref|pntr_ref|array_ref|struct_ref
pntr_opd: deref|ref
pntr_assign: deref "=" logic_exp";"
// ---------------------------------- L_Array ---------------------------------
array_size_qual: size_qual"["[NUM]"]"
array_creation: "{"logic_exp("," logic_exp)*"}"
subscript: arith_opd"["logic_exp"]"
array_opd: array_creation|subscript
array_ref: "&"subscript
array_assign: subscript "=" logic_exp";"
// --------------------------------- L_Struct ---------------------------------
struct_size_qual: "struct" NAME
struct_creation: "{""."NAME"="logic_exp("," "."NAME"="logic_exp)*"}"
attr: NAME"."NAME
struct_opd: struct_creation|attr
struct_ref: "&"attr
struct_assign: attr "=" logic_exp";"
struct_decl_stmt: "struct" NAME "{"size_qual NAME(";" size_qual NAME)*"}"";"
// --------------------------------- L_If_Else --------------------------------
if_without_else: "if""("logic_exp")" "{" stmt* "}"
if_with_else: "if""("logic_exp")" "{" stmt* "}" "else" "{" stmt* "}"|"if""("logic_exp")" "{" stmt* "}" "else" stmt
if_else_stmt: if_without_else|if_with_else
// ---------------------------------- L_Loop ----------------------------------
while_: "while""("logic_exp")" "{" stmt* "}"
do_while: "do" "{" stmt* "}" "while""("logic_exp")"";"
loop_stmt: while_|do_while
// ---------------------------------- L_Stmt ----------------------------------
stmt: print_stmt|assign_alloc_stmt|struct_decl_stmt|if_else_stmt|loop_stmt
// ----------------------------------- L_Fun ----------------------------------
fun_size_qual: "fun" size_qual
fun_call: NAME"("[logic_exp("," logic_exp)*]")"
fun_opd: fun_call
return_: "return" logic_exp
fun_stmt: fun_call|return_
def_: size_qual NAME"("[size_qual NAME("," size_qual NAME)*]")" "{" stmt* "}"
// ---------------------------------- L_File ----------------------------------
file: NAME def_*

%import common.WS
%ignore WS
%ignore COMMENT
