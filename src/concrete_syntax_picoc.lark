// ============================================================================
// =                                   Lexer                                  =
// ============================================================================
// --------------------------------- L_Comment --------------------------------
COMMENT: "//" /[^\n]*/|"/*" /(.|\n)*?/ "*/"
RETI_COMMENT.2: "//" " "? "#" /[^\n]*/
// ---------------------------------- L_Arith ---------------------------------
DIG_NO_0: "1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
DIG_WITH_0: "0"|DIG_NO_0
NUM: "0"|DIG_NO_0 DIG_WITH_0*
ASCII_CHAR: " ".."~"
CHAR: "'"ASCII_CHAR"'"
FILENAME: ASCII_CHAR+".picoc"
LETTER: "a".."z"|"A".."Z"
NAME: (LETTER|"_")(LETTER|DIG_WITH_0|"_")*
name: NAME|INT_NAME|CHAR_NAME|VOID_NAME
NOT: "~"
REF_AND: "&"
un_op: SUB_MINUS|LOGIC_NOT|NOT|MUL_DEREF_PNTR|REF_AND
MUL_DEREF_PNTR: "*"
DIV: "/"
MOD: "%"
prec1_op: MUL_DEREF_PNTR|DIV|MOD
ADD: "+"
SUB_MINUS: "-"
prec2_op: ADD|SUB_MINUS
// ---------------------------------- L_Logic ---------------------------------
LT: "<"
LTE: "<="
GT: ">"
GTE: ">="
rel_op: LT|LTE|GT|GTE
EQ: "=="
NEQ: "!="
eq_op: EQ|NEQ
LOGIC_NOT: "!"
// ------------------------------ L_Assign_Alloc ------------------------------
INT_DT.2: "int"
INT_NAME.3: "int"(LETTER|DIG_WITH_0|"_")+
CHAR_DT.2: "char"
CHAR_NAME.3: "char"(LETTER|DIG_WITH_0|"_")+
VOID_DT.2: "void"
VOID_NAME.3: "void"(LETTER|DIG_WITH_0|"_")+
prim_dt: INT_DT|CHAR_DT|VOID_DT
// ============================================================================
// =                                  Parser                                  =
// ============================================================================
// --------------- L_Arith + L_Array + L_Pntr + L_Struct + L_Fun --------------
prim_exp: name|NUM|CHAR|"("logic_or")"
post_exp: array_subscr|struct_attr|fun_call|input_exp|print_exp|prim_exp
un_exp: un_op un_exp|post_exp
// ---------------------------------- L_Arith ---------------------------------
input_exp: "input""("")"
print_exp: "print""("logic_or")"
arith_prec1: arith_prec1 prec1_op un_exp|un_exp
arith_prec2: arith_prec2 prec2_op arith_prec1|arith_prec1
arith_and: arith_and "&" arith_prec2|arith_prec2
arith_oplus: arith_oplus "^" arith_and|arith_and
arith_or: arith_or "|" arith_oplus|arith_oplus
// ---------------------------------- L_Logic ---------------------------------
rel_exp: rel_exp rel_op arith_or|arith_or
eq_exp: eq_exp eq_op rel_exp|rel_exp
logic_and: logic_and "&&" eq_exp|eq_exp
logic_or: logic_or "||" logic_and|logic_and
// ------------------------------ L_Assign_Alloc ------------------------------
type_spec: prim_dt|struct_spec
alloc: type_spec pntr_decl
assign_stmt: un_exp "=" logic_or";"
bug_initializer: logic_or|array_init|struct_init
init_stmt: alloc "=" bug_initializer";"
const_init_stmt: "const" type_spec name "=" NUM";"
// ---------------------------------- L_Pntr ----------------------------------
!pntr_deg: "*"*
pntr_decl: pntr_deg array_decl|array_decl
// ---------------------------------- L_Array ---------------------------------
array_dims: ("["NUM"]")*
array_decl: name array_dims|"("pntr_decl")" array_dims
array_init: "{"bug_initializer("," bug_initializer)*"}"
array_subscr: post_exp"["logic_or"]"
// --------------------------------- L_Struct ---------------------------------
struct_spec: "struct" name
struct_params: (alloc";")+
struct_decl: "struct" name "{"struct_params"}"
struct_init: "{""."name"="bug_initializer ("," "."name"="bug_initializer)*"}"
struct_attr: post_exp"."name
// --------------------------------- L_If_Else --------------------------------
if_stmt: "if""("logic_or")" exec_part
if_else_stmt: "if""("logic_or")" exec_part "else" exec_part
// ---------------------------------- L_Loop ----------------------------------
while_stmt: "while""("logic_or")" exec_part
do_while_stmt: "do" exec_part "while""("logic_or")"";"
// ---------------------------------- L_Stmt ----------------------------------
decl_exp_stmt: alloc";"
decl_direct_stmt: assign_stmt|init_stmt|const_init_stmt
decl_part: decl_exp_stmt|decl_direct_stmt|RETI_COMMENT
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
compound_stmt: "{" exec_part* "}"
exec_exp_stmt: logic_or";"
exec_direct_stmt: if_stmt|if_else_stmt|while_stmt|do_while_stmt|assign_stmt|fun_return_stmt
exec_part: compound_stmt|exec_exp_stmt|exec_direct_stmt|RETI_COMMENT
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
decl_exec_stmts: decl_part* exec_part*
// ----------------------------------- L_Fun ----------------------------------
fun_args: [logic_or("," logic_or)*]
fun_call: name"("fun_args")"
fun_return_stmt: "return" [logic_or]";"
fun_params: [alloc("," alloc)*]
fun_decl: type_spec pntr_deg name"("fun_params")"
fun_def: type_spec pntr_deg name"("fun_params")" "{" decl_exec_stmts "}"
// ---------------------------------- L_File ----------------------------------
decl_def: (struct_decl|fun_decl)";"|fun_def
decls_defs: decl_def*
file: FILENAME decls_defs


%import common.WS
%ignore WS
%ignore COMMENT
