// ============================================================================
// =                                   Lexer                                  =
// ============================================================================
// --------------------------------- L_Comment --------------------------------
COMMENT: "//" /[^\n]*/|"/*" /(.|\n)*?/ "*/"
// ---------------------------------- L_Arith ---------------------------------
DIG_NO_0: "1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
DIG_WITH_0: "0"|DIG_NO_0
NUM: "0"|DIG_NO_0 DIG_WITH_0*
ASCII_CHAR: " ".."~"
CHAR: "'"ASCII_CHAR"'"
FILENAME: ASCII_CHAR+".picoc"
identifier: IDENTIFIER|INT_NAME|CHAR_NAME|VOID_NAME
LETTER: "a".."z"|"A".."Z"
IDENTIFIER: (LETTER|"_")(LETTER|DIG_WITH_0|"_")*
unary_op: REF|PNTR_DEREF|SUB_MINUS|NOT|LOGIC_NOT
REF: "&"
PNTR_DEREF: "*"
NOT: "~"
prec1_op: MUL|DIV|MOD
MUL: "*"
DIV: "/"
MOD: "%"
prec2_op: ADD|SUB_MINUS
ADD: "+"
SUB_MINUS: "-"
// ---------------------------------- L_Logic ---------------------------------
LOGIC_NOT: "!"
rel_op: LT|LTE|GT|GTE
eq_op: EQ|NEQ
EQ: "=="
NEQ: "!="
LT: "<"
LTE: "<="
GT: ">"
GTE: ">="
// ------------------------------ L_Assign_Alloc ------------------------------
PRIM_DT: INT_DT|CHAR_DT|VOID_DT
INT_DT.2: "int"
INT_NAME.3: "int"(LETTER|DIG_WITH_0|"_")+
CHAR_DT.2: "char"
CHAR_NAME.3: "char"(LETTER|DIG_WITH_0|"_")+
VOID_DT.2: "void"
VOID_NAME.3: "void"(LETTER|DIG_WITH_0|"_")+
// ---------------------------------- L_Pntr ----------------------------------
deref_offset_op: ADD|SUB_MINUS
// ============================================================================
// =                                  Parser                                  =
// ============================================================================
// --------------- L_Arith + L_Array + L_Pntr + L_Struct + L_Fun --------------
primary_exp: identifier|NUM|CHAR|"("logic_or")"
postfix_exp: postfix_exp"["logic_or"]"|postfix_exp"."identifier|fun_call|input_exp|print_exp|primary_exp
unary_exp: unary_op unary_exp|postfix_exp
// ---------------------------------- L_Arith ---------------------------------
input_exp: "input""("")"
print_exp: "print""("logic_or")"
arith_prec1: arith_prec1 prec1_op unary_exp
arith_prec2: arith_prec2 prec2_op arith_prec1
arith_and: arith_and "&" arith_prec2
arith_oplus: arith_oplus "^" arith_and
arith_or: arith_or "|" arith_oplus
// ---------------------------------- L_Logic ---------------------------------
rel_exp: rel_exp rel_op arith_or
eq_exp: eq_exp eq_op rel_exp
logic_and: logic_and "&&" eq_exp
logic_or: logic_or "||" logic_and
// ------------------------------ L_Assign_Alloc ------------------------------
type_specifier: PRIM_DT|struct_specifier
alloc: ["const"] type_specifier pntr_declarator
lhs: postfix_exp|alloc
initializer: logic_or|array_initializer|struct_initializer
assign: lhs "=" initializer
// ---------------------------------- L_Array ---------------------------------
array_dims: ("["NUM"]")*
array_declarator: identifier array_dims|"("pntr_declarator")" array_dims
array_initializer: "{"entry("," entry)*"}"
// ---------------------------------- L_Pntr ----------------------------------
!pntr_deg: "*"*
pntr_declarator: pntr_deg array_declarator|array_declarator
// --------------------------------- L_Struct ---------------------------------
struct_specifier: "struct" identifier
struct_params: (alloc";")+
struct_decl: "struct" identifier "{"struct_params"}"";"
struct_initializer: "{""."identifier"="entry ("," "."identifier"="entry)*"}"
// --------------------------------- L_If_Else --------------------------------
exec_stmts: exec_part*
if_stmt: "if""("logic_or")" "{" exec_stmts "}"
if_else_stmt: "if""("logic_or")" "{" exec_stmts "}" "else" ("{" exec_stmts "}"|exec_part)
selection_stmt: if_stmt|if_else_stmt
// ---------------------------------- L_Loop ----------------------------------
while_stmt: "while""("logic_or")" "{" exec_stmts "}"
do_while_stmt: "do" "{" exec_stmts "}" "while""("logic_or")"";"
loop_stmt: while_stmt|do_while_stmt
// ---------------------------------- L_Stmt ----------------------------------
decl_exp_stmt: alloc";"
decl_direct_stmt: assign";"
decl_part: decl_exp_stmt|decl_direct_smt
exec_exp_stmt: logic_or";"
exec_direct_stmt: (assign|return)";"
exec_part: selection_stmt|loop_stmt|exec_exp_stmt|exec_direct_stmt
decl_exec_stmts: decl_part* exec_part*
// ----------------------------------- L_Fun ----------------------------------
fun_args: [logic_or("," logic_or)*]
fun_call: identifier"("fun_args")"
return_stmt: "return" [logic_or]
fun_params: [alloc("," alloc)*]
fun_decl: type_specifier pntr_deg identifier"("fun_params")"";"
fun_def: type_specifier pntr_deg identifier"("fun_params")" "{" decl_exec_stmts "}"
// ---------------------------------- L_File ----------------------------------
decl_def: struct_decl|fun_decl|fun_def
decls_defs: decl_def*
file: FILENAME decls_defs


%import common.WS
%ignore WS
%ignore COMMENT
