!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/areo/Documents/Studium/pico-c-compiler/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
0	.vimspector.json	/^          ".\/src\/input.picoc",$/;"	s	array:configurations.Debug.configuration.args
1	.vimspector.json	/^          ".\/src\/output.reti",$/;"	s	array:configurations.Debug.configuration.args
2	.vimspector.json	/^          "-t",$/;"	s	array:configurations.Debug.configuration.args
3	.vimspector.json	/^          "-v",$/;"	s	array:configurations.Debug.configuration.args
4	.vimspector.json	/^          "-p"$/;"	s	array:configurations.Debug.configuration.args
ALLOC	src/lexer.py	/^    ALLOC = "allocation"$/;"	v	class:TT
AND	src/lexer.py	/^    AND = "and as part of logical expression grammar"$/;"	v	class:TT
AND_OP	src/lexer.py	/^    AND_OP = "and operator"$/;"	v	class:TT
ASSIGNMENT	src/lexer.py	/^    ASSIGNMENT = "="$/;"	v	class:TT
ASTBuilder	src/ast_builder.py	/^class ASTBuilder:$/;"	c
ASTNode	src/abstract_syntax_tree.py	/^class ASTNode(TokenNode):$/;"	c
ArithmeticExpressionGrammar	src/arithmetic_expression_grammar.py	/^class ArithmeticExpressionGrammar(BacktrackingParser):$/;"	c
AssignmentAllocationGrammar	src/assignment_allocation_grammar.py	/^class AssignmentAllocationGrammar(ArithmeticExpressionGrammar):$/;"	c
BINOP_PREC_1	src/lexer.py	/^    BINOP_PREC_1 = "binary operator with precedence 1"$/;"	v	class:TT
BINOP_PREC_2	src/lexer.py	/^    BINOP_PREC_2 = "binary operator with precedence 2"$/;"	v	class:TT
BITSHIFT	src/lexer.py	/^    BITSHIFT = "bitshift"$/;"	v	class:TT
BacktrackingParser	src/parser.py	/^class BacktrackingParser():$/;"	c
COMP_OP	src/lexer.py	/^    COMP_OP = "comparison operator"$/;"	v	class:TT
COMP_OPERATOR_ASSIGNMENT_BITSHIFT	src/lexer.py	/^    COMP_OPERATOR_ASSIGNMENT_BITSHIFT = ['=', '<', '>']$/;"	v	class:Lexer
ConditionalGrammar	src/conditional_grammar.py	/^class ConditionalGrammar(LogicExpressionGrammar):$/;"	c
DIGIT_WITHOUT_ZERO	src/lexer.py	/^    DIGIT_WITHOUT_ZERO = "123456789"$/;"	v	class:Lexer
DIGIT_WITH_ZERO	src/lexer.py	/^    DIGIT_WITH_ZERO = "0123456789"$/;"	v	class:Lexer
Debug	.vimspector.json	/^    "Debug": {$/;"	o	object:configurations
ELSE	src/lexer.py	/^    ELSE = "else"$/;"	v	class:TT
EOF	src/lexer.py	/^    EOF = "EOF"$/;"	v	class:TT
EOF_CHAR	src/lexer.py	/^    EOF_CHAR = "EOF"$/;"	v	class:Lexer
FUNCTION	src/lexer.py	/^    FUNCTION = "function"$/;"	v	class:TT
FunctionGrammar	src/function_grammar.py	/^class FunctionGrammar(StatementSequenceGrammar):$/;"	c
IDENTIFIER	src/lexer.py	/^    IDENTIFIER = "word"$/;"	v	class:TT
IF	src/lexer.py	/^    IF = "if"$/;"	v	class:TT
InvalidCharacterError	src/errors.py	/^class InvalidCharacterError(Exception):$/;"	c
LETTER	src/lexer.py	/^    LETTER = string.ascii_letters$/;"	v	class:Lexer
LETTER_DIGIT	src/lexer.py	/^    LETTER_DIGIT = LETTER + DIGIT_WITH_ZERO + '_'$/;"	v	class:Lexer
LT	src/parser.py	/^    def LT(self, i):$/;"	m	class:BacktrackingParser
LTT	src/parser.py	/^    def LTT(self, i):$/;"	m	class:BacktrackingParser
L_PAREN	src/lexer.py	/^    L_PAREN = "("$/;"	v	class:TT
Lexer	src/lexer.py	/^class Lexer:$/;"	c
LogicExpressionGrammar	src/logic_expression_grammar.py	/^class LogicExpressionGrammar(ArithmeticExpressionGrammar):$/;"	c
MINUS	src/lexer.py	/^    MINUS = "-"$/;"	v	class:TT
MismatchedTokenError	src/errors.py	/^class MismatchedTokenError(Exception):$/;"	c
NOT	src/lexer.py	/^    NOT = "not operator or not as part of logical expression grammar"$/;"	v	class:TT
NUMBER	src/lexer.py	/^    NUMBER = "number"$/;"	v	class:TT
NoApplicableRuleError	src/errors.py	/^class NoApplicableRuleError(Exception):$/;"	c
OR	src/lexer.py	/^    OR = "or as part of logical expression grammar"$/;"	v	class:TT
OR_OP	src/lexer.py	/^    OR_OP = "or operator"$/;"	v	class:TT
PRIM_DT	src/lexer.py	/^    PRIM_DT = "primitive datatype"$/;"	v	class:TT
Pico-C Compiler	README.md	/^# Pico-C Compiler$/;"	c
Prec1Node	src/abstract_syntax_tree.py	/^class Prec1Node(ASTNode):$/;"	c
ROOT	src/lexer.py	/^    ROOT = "ROOT"$/;"	v	class:TT
R_PAREN	src/lexer.py	/^    R_PAREN = ")"$/;"	v	class:TT
SEMICOLON	src/lexer.py	/^    SEMICOLON = ";"$/;"	v	class:TT
STATEMENT	src/lexer.py	/^    STATEMENT = "statement"$/;"	v	class:TT
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
StatementSequenceGrammar	src/statement_sequence_grammar.py	/^class StatementSequenceGrammar(AssignmentAllocationGrammar):$/;"	c
SyntaxError	src/errors.py	/^class SyntaxError(Exception):$/;"	c
TEST_BINARIES	Makefile	/^TEST_BINARIES = $(wildcard .\/test\/*_test.py)$/;"	m
TT	src/lexer.py	/^class TT(Enum):$/;"	c
TestArithmeticExpreessions	.misc/test_parser	/^class TestArithmeticExpreessions(unittest.TestCase):$/;"	c
TestErrors	.misc/test_errors	/^class TestErrors(unittest.TestCase):$/;"	c
Token	src/lexer.py	/^class Token():$/;"	c
TokenNode	src/abstract_syntax_tree.py	/^class TokenNode:$/;"	c
UNARY_OP	src/lexer.py	/^    UNARY_OP = "unary operator"$/;"	v	class:TT
Usage	README.md	/^## Usage$/;"	s	chapter:Pico-C Compiler
Used Resources	README.md	/^## Used Resources$/;"	s	chapter:Pico-C Compiler
WHILE	src/lexer.py	/^    WHILE = "while"$/;"	v	class:TT
__init__	src/abstract_syntax_tree.py	/^    def __init__(self, token):$/;"	m	class:Prec1Node
__init__	src/abstract_syntax_tree.py	/^    def __init__(self, token):$/;"	m	class:TokenNode
__init__	src/abstract_syntax_tree.py	/^    def __init__(self, tokentypes):$/;"	m	class:ASTNode
__init__	src/arithmetic_expression_grammar.py	/^    def __init__(self, lexer, num_lts):$/;"	m	class:ArithmeticExpressionGrammar
__init__	src/assignment_allocation_grammar.py	/^    def __init__(self, lexer, num_lts):$/;"	m	class:AssignmentAllocationGrammar
__init__	src/ast_builder.py	/^    def __init__(self):$/;"	m	class:ASTBuilder
__init__	src/conditional_grammar.py	/^    def __init__(self):$/;"	m	class:ConditionalGrammar
__init__	src/errors.py	/^    def __init__(self, expected, found):$/;"	m	class:MismatchedTokenError
__init__	src/errors.py	/^    def __init__(self, expected, found):$/;"	m	class:NoApplicableRuleError
__init__	src/errors.py	/^    def __init__(self, expected, found):$/;"	m	class:SyntaxError
__init__	src/errors.py	/^    def __init__(self, found):$/;"	m	class:InvalidCharacterError
__init__	src/function_grammar.py	/^    def __init__(self, lexer, num_lts):$/;"	m	class:FunctionGrammar
__init__	src/lexer.py	/^    def __init__(self, fname, input):$/;"	m	class:Lexer
__init__	src/lexer.py	/^    def __init__(self, type, value):$/;"	m	class:Token
__init__	src/logic_expression_grammar.py	/^    def __init__(self, lexer, num_lts):$/;"	m	class:LogicExpressionGrammar
__init__	src/parser.py	/^    def __init__(self, lexer):$/;"	m	class:BacktrackingParser
__init__	src/statement_sequence_grammar.py	/^    def __init__(self, lexer, num_lts):$/;"	m	class:StatementSequenceGrammar
__repr__	src/abstract_syntax_tree.py	/^    def __repr__(self):$/;"	m	class:ASTNode
__repr__	src/abstract_syntax_tree.py	/^    def __repr__(self):$/;"	m	class:TokenNode
__repr__	src/lexer.py	/^    def __repr__(self):$/;"	m	class:Token
_aa	src/assignment_allocation_grammar.py	/^    def _aa(self):$/;"	m	class:AssignmentAllocationGrammar
_alloc	src/assignment_allocation_grammar.py	/^    def _alloc(self):$/;"	m	class:AssignmentAllocationGrammar
_and	src/lexer.py	/^    def _and(self):$/;"	m	class:Lexer
_and_expr	src/logic_expression_grammar.py	/^    def _and_expr(self):$/;"	m	class:LogicExpressionGrammar
_ao	src/arithmetic_expression_grammar.py	/^    def _ao(self):$/;"	m	class:ArithmeticExpressionGrammar
_atom	src/logic_expression_grammar.py	/^    def _atom(self):$/;"	m	class:LogicExpressionGrammar
_basename	src/pico_c_compiler.py	/^def _basename(fname):$/;"	f
_check_word	src/lexer.py	/^    def _check_word(self, word, tokentype):$/;"	m	class:Lexer
_comment	.vimspector.json	/^        "_comment": "args: [.\/src\/input.picoc, .\/src\/output.reti, -p, -a]",$/;"	s	object:configurations.Debug.configuration
_comp_operator_assignment_bitshift	src/lexer.py	/^    def _comp_operator_assignment_bitshift(self):$/;"	m	class:Lexer
_compile	src/pico_c_compiler.py	/^def _compile(fname, code):$/;"	f
_consume_next_token	src/parser.py	/^    def _consume_next_token(self):$/;"	m	class:BacktrackingParser
_fill	src/parser.py	/^    def _fill(self, not_filled_up):$/;"	m	class:BacktrackingParser
_identifier	src/lexer.py	/^    def _identifier(self):$/;"	m	class:Lexer
_identifier_special_keyword	src/lexer.py	/^    def _identifier_special_keyword(self):$/;"	m	class:Lexer
_is_assignment	src/statement_sequence_grammar.py	/^    def _is_assignment(self):$/;"	m	class:StatementSequenceGrammar
_is_statement	src/statement_sequence_grammar.py	/^    def _is_statement(self):$/;"	m	class:StatementSequenceGrammar
_is_tasting	src/parser.py	/^    def _is_tasting(self):$/;"	m	class:BacktrackingParser
_is_tokennode	src/abstract_syntax_tree.py	/^    def _is_tokennode(self, node):$/;"	m	class:ASTNode
_lo	src/logic_expression_grammar.py	/^    def _lo(self):$/;"	m	class:LogicExpressionGrammar
_mark	src/parser.py	/^    def _mark(self):$/;"	m	class:BacktrackingParser
_not_expr	src/logic_expression_grammar.py	/^    def _not_expr(self):$/;"	m	class:LogicExpressionGrammar
_number	src/lexer.py	/^    def _number(self):$/;"	m	class:Lexer
_or	src/lexer.py	/^    def _or(self):$/;"	m	class:Lexer
_or_expr	src/logic_expression_grammar.py	/^    def _or_expr(self):$/;"	m	class:LogicExpressionGrammar
_paren	src/arithmetic_expression_grammar.py	/^    def _paren(self):$/;"	m	class:ArithmeticExpressionGrammar
_paren	src/logic_expression_grammar.py	/^    def _paren(self):$/;"	m	class:LogicExpressionGrammar
_prec1	src/arithmetic_expression_grammar.py	/^    def _prec1(self):$/;"	m	class:ArithmeticExpressionGrammar
_prec2	src/arithmetic_expression_grammar.py	/^    def _prec2(self):$/;"	m	class:ArithmeticExpressionGrammar
_read_file	src/pico_c_compiler.py	/^def _read_file(infile, outfile):$/;"	f
_release	src/parser.py	/^    def _release(self):$/;"	m	class:BacktrackingParser
_s	src/statement_sequence_grammar.py	/^    def _s(self):$/;"	m	class:StatementSequenceGrammar
_shell	src/pico_c_compiler.py	/^def _shell():$/;"	f
_ss	src/statement_sequence_grammar.py	/^    def _ss(self):$/;"	m	class:StatementSequenceGrammar
_sync	src/parser.py	/^    def _sync(self, i):$/;"	m	class:BacktrackingParser
_unop	src/arithmetic_expression_grammar.py	/^    def _unop(self):$/;"	m	class:ArithmeticExpressionGrammar
adapter	.vimspector.json	/^      "adapter": "debugpy",$/;"	s	object:configurations.Debug
addChild	src/abstract_syntax_tree.py	/^    def addChild(self, node):$/;"	m	class:ASTNode
addChild	src/ast_builder.py	/^    def addChild(self, node):$/;"	m	class:ASTBuilder
all	Makefile	/^all: run-shell-ast clean$/;"	t
args	.misc/pico_c_compiler	/^args = None$/;"	v
args	.vimspector.json	/^        "args": [$/;"	a	object:configurations.Debug.configuration
args	src/globals.py	/^args = None$/;"	v
basename	.misc/pico_c_compiler	/^def basename(fname):$/;"	f
clean	Makefile	/^clean:$/;"	t
code_aa	src/assignment_allocation_grammar.py	/^    def code_aa(self):$/;"	m	class:AssignmentAllocationGrammar
code_ae	.misc/test_errors	/^    code_ae = ["2 + "]$/;"	v	class:TestErrors
code_ae	src/arithmetic_expression_grammar.py	/^    def code_ae(self):$/;"	m	class:ArithmeticExpressionGrammar
code_ae_le	src/logic_expression_grammar.py	/^    def code_ae_le(self):$/;"	m	class:LogicExpressionGrammar
code_le	src/logic_expression_grammar.py	/^    def code_le(self):$/;"	m	class:LogicExpressionGrammar
code_ss	src/statement_sequence_grammar.py	/^    def code_ss(self):$/;"	m	class:StatementSequenceGrammar
compile	.misc/pico_c_compiler	/^def compile(fname, code):$/;"	f
configuration	.vimspector.json	/^      "configuration": {$/;"	o	object:configurations.Debug
configurations	.vimspector.json	/^  "configurations": {$/;"	o
console	.vimspector.json	/^        "console": "externalTerminal",$/;"	s	object:configurations.Debug.configuration
cwd	.vimspector.json	/^        "cwd": "${workspaceFolder}",$/;"	s	object:configurations.Debug.configuration
debugOptions	.vimspector.json	/^        "debugOptions": [],$/;"	a	object:configurations.Debug.configuration
down	src/ast_builder.py	/^    def down(self, classname, tokens):$/;"	m	class:ASTBuilder
error	.misc/test_errors	/^    syntax_tree_rootnode, error = parser.parse()$/;"	v	class:TestErrors
error	.misc/test_errors	/^    tokens, error = lexer.create_tokens()$/;"	v	class:TestErrors
expected_output	.misc/test_errors	/^    expected_output = "(CONSTANT:12, ['BINOP', 'PRECEDENCE_1']:*, (CONSTANT:165, ['BINOP', 'PREC/;"	v	class:TestErrors
getNodeType	src/abstract_syntax_tree.py	/^    def getNodeType(self):$/;"	m	class:TokenNode
isEmpty	src/abstract_syntax_tree.py	/^    def isEmpty(self):$/;"	m	class:TokenNode
lexer	.misc/test_errors	/^    lexer = Lexer("<testin>", code_ae)$/;"	v	class:TestErrors
main	.misc/pico_c_compiler	/^def main():$/;"	f
main	.misc/test.cpp	/^int main(int argc, const char **argv) { while_true(); }$/;"	f	typeref:typename:int
main	src/pico_c_compiler.py	/^def main():$/;"	f
match	src/lexer.py	/^    def match(self, m):$/;"	m	class:Lexer
match	src/parser.py	/^    def match(self, tts):$/;"	m	class:BacktrackingParser
match_and_add	src/parser.py	/^    def match_and_add(self, tts):$/;"	m	class:BacktrackingParser
name	.vimspector.json	/^        "name": "Debug",$/;"	s	object:configurations.Debug.configuration
next_char	src/lexer.py	/^    def next_char(self):$/;"	m	class:Lexer
next_token	src/lexer.py	/^    def next_token(self):$/;"	m	class:Lexer
parser	.misc/test_errors	/^    parser = Parser(tokens)$/;"	v	class:TestErrors
program	.vimspector.json	/^        "program": "${workspaceFolder}\/src\/pico_c_compiler.py",$/;"	s	object:configurations.Debug.configuration
project_opened	.vim/.ropeproject/config.py	/^def project_opened(project):$/;"	f
python	.vimspector.json	/^        "python": "\/usr\/bin\/python",$/;"	s	object:configurations.Debug.configuration
python.linting.enabled	.vim/coc-settings.json	/^  "python.linting.enabled": true,$/;"	b
python.linting.flake8Enabled	.vim/coc-settings.json	/^  "python.linting.flake8Enabled": true$/;"	b
python.linting.pylintEnabled	.vim/coc-settings.json	/^  "python.linting.pylintEnabled": false,$/;"	b
read_file	.misc/pico_c_compiler	/^def read_file(infile, outfile):$/;"	f
request	.vimspector.json	/^        "request": "launch",$/;"	s	object:configurations.Debug.configuration
run-read-ast	Makefile	/^run-read-ast:$/;"	t
run-read-ast-verbose	Makefile	/^run-read-ast-verbose:$/;"	t
run-read-tokens	Makefile	/^run-read-tokens:$/;"	t
run-shell-ast	Makefile	/^run-shell-ast:$/;"	t
run-shell-ast-verbose	Makefile	/^run-shell-ast-verbose:$/;"	t
run-shell-tokens	Makefile	/^run-shell-tokens:$/;"	t
s:l	Session.vim	/^let s:l = 4 - ((3 * winheight(0) + 23) \/ 46)$/;"	v
s:so_save	Session.vim	/^let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
set_prefs	.vim/.ropeproject/config.py	/^def set_prefs(prefs):$/;"	f
shell	.misc/pico_c_compiler	/^def shell():$/;"	f
start_parse	src/function_grammar.py	/^    def start_parse(self):$/;"	m	class:FunctionGrammar
stopOnEntry	.vimspector.json	/^        "stopOnEntry": true,$/;"	b	object:configurations.Debug.configuration
syntax_tree_rootnode	.misc/test_errors	/^    syntax_tree_rootnode, error = parser.parse()$/;"	v	class:TestErrors
taste	src/parser.py	/^    def taste(self, rule):$/;"	m	class:BacktrackingParser
test	Makefile	/^test: $(TEST_BINARIES)$/;"	t
test_illegal_char_error	.misc/test_errors	/^    def test_illegal_char_error()$/;"	m	class:TestErrors
test_parenthesis	.misc/test_parser	/^    def test_parenthesis(self):$/;"	m	class:TestArithmeticExpreessions
test_precedence_rules	.misc/test_parser	/^    def test_precedence_rules(self):$/;"	m	class:TestArithmeticExpreessions
test_unop	.misc/test_parser	/^    def test_unop(self):$/;"	m	class:TestArithmeticExpreessions
test_varying_spacing	.misc/test_parser	/^    def test_varying_spacing(self):$/;"	m	class:TestArithmeticExpreessions
tokens	.misc/test_errors	/^    tokens, error = lexer.create_tokens()$/;"	v	class:TestErrors
type	.vimspector.json	/^        "type": "python",$/;"	s	object:configurations.Debug.configuration
up	src/ast_builder.py	/^    def up(self, savestate_node):$/;"	m	class:ASTBuilder
while_true	.misc/test.cpp	/^void while_true() {$/;"	f	typeref:typename:void
