    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 226, in _compile
    print(ast_node.show_generated_code())
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 96, in align_comments
    for code_line in self._convert_to_lines():
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 96, in align_comments
    for code_line in self._convert_to_lines():
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [3:57:03]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
['# Main Funktion Start', 'LOADI SP 200;', '# Allokation Start', '# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt', '# Allokation Ende', '# Allokation Start', '# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt', '# Allokation Ende', '# Zuweisung oder Sub-Zuweisung Start', '# Allokation Start', '# Konstante z vom Typ int zur Symboltabelle hinzugefügt', '# Allokation Ende', '# Konstante z in Symboltabelle den Wert 5 zugewiesen', '# Zuweisung oder Sub-Zuweisung Ende', '# Zuweisung oder Sub-Zuweisung Start', '# Arithmetischer Operand Start', 'SUBI SP 1;  # Stack um eine Zelle erweitern', 'LOAD ACC 101;  # Wert von y in ACC laden', 'STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle', '# Arithmetischer Operand Ende', '# Arithmetischer Operand Start', 'SUBI SP 1;  # Stack um eine Zelle erweitern', 'LOADI ACC 3;  # Wert von 3 in ACC laden', 'STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle', '# Arithmetischer Operand Ende', '# codeaa(3) (oder codela(3), falls logischer Ausdruck)', 'LOADIN SP ACC 1;  # Wert von 3 in ACC laden', 'ADDI SP 1;  # Stack um eine Zelle verkürzen', 'STORE ACC 101;  # Wert von 3 in Variable y speichern', '# Zuweisung oder Sub-Zuweisung Ende', '# Zuweisung oder Sub-Zuweisung Start', '# Arithmetischer Operand Start', 'SUBI SP 1;  # Stack um eine Zelle erweitern', 'LOAD ACC 100;  # Wert von x in ACC laden', 'STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle', '# Arithmetischer Operand Ende', '# Arithmetischer Operand Start', 'SUBI SP 1;  # Stack um eine Zelle erweitern', 'LOADI ACC 2;  # Wert von 2 in ACC laden', 'STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle', '# Arithmetischer Operand Ende', '# codeaa(2) (oder codela(2), falls logischer Ausdruck)', 'LOADIN SP ACC 1;  # Wert von 2 in ACC laden', 'ADDI SP 1;  # Stack um eine Zelle verkürzen', 'STORE ACC 100;  # Wert von 2 in Variable x speichern', '# Zuweisung oder Sub-Zuweisung Ende', '# Zuweisung oder Sub-Zuweisung Start', '# Arithmetischer Operand Start', 'SUBI SP 1;  # Stack um eine Zelle erweitern', 'LOAD ACC 100;  # Wert von x in ACC laden', 'STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle', '# Arithmetischer Operand Ende', '# Arithmetische binäre Operation Start', '# Arithmetischer Operand Start', 'SUBI SP 1;  # Stack um eine Zelle erweitern', 'LOAD ACC 100;  # Wert von x in ACC laden', 'STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle', '# Arithmetischer Operand Ende', '# Arithmetische binäre Operation Start', '# Arithmetische binäre Operation Start', '# Arithmetischer Operand Start', 'SUBI SP 1;  # Stack um eine Zelle erweitern', 'LOAD ACC 101;  # Wert von y in ACC laden', 'STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle', '# Arithmetischer Operand Ende', '# Arithmetischer Operand Start', 'SUBI SP 1;  # Stack um eine Zelle erweitern', 'LOADI ACC 5;  # Wert von z in ACC laden', 'STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle', '# Arithmetischer Operand Ende', '# codeaa(y)', '# codeaa(z)', 'LOADIN SP ACC 2;  # Wert von y in ACC laden', 'LOADIN SP IN2 1;  # Wert von z in IN2 laden', 'MUL ACC IN2;  # Wert von (y * z) in ACC laden', 'STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle', 'ADDI SP 1;  # Stack um eine Zelle verkürzen', '# Arithmetische binäre Operation Ende', '# Arithmetischer Operand Start', 'SUBI SP 1;  # Stack um eine Zelle erweitern', 'LOADI ACC 10;  # Wert von 10 in ACC laden', 'STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle', '# Arithmetischer Operand Ende', '# codeaa((y * z))', '# codeaa(10)', 'LOADIN SP ACC 2;  # Wert von (y * z) in ACC laden', 'LOADIN SP IN2 1;  # Wert von 10 in IN2 laden', 'ADD ACC IN2;  # Wert von ((y * z) + 10) in ACC laden', 'STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle', 'ADDI SP 1;  # Stack um eine Zelle verkürzen', '# Arithmetische binäre Operation Ende', '# codeaa(x)', '# codeaa(((y * z) + 10))', 'LOADIN SP ACC 2;  # Wert von x in ACC laden', 'LOADIN SP IN2 1;  # Wert von ((y * z) + 10) in IN2 laden', 'ADD ACC IN2;  # Wert von (x + ((y * z) + 10)) in ACC laden', 'STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle', 'ADDI SP 1;  # Stack um eine Zelle verkürzen', '# Arithmetische binäre Operation Ende', '# codeaa((x + ((y * z) + 10))) (oder codela((x + ((y * z) + 10))), falls logischer Ausdruck)', 'LOADIN SP ACC 1;  # Wert von (x + ((y * z) + 10)) in ACC laden', 'ADDI SP 1;  # Stack um eine Zelle verkürzen', 'STORE ACC 100;  # Wert von (x + ((y * z) + 10)) in Variable x speichern', '# Zuweisung oder Sub-Zuweisung Ende', '# code((int x) ... )', 'JUMP 0;', '# Main Funktion Ende']
name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [3:57:21]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 222, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_nodes.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 28, in visit
    self._pretty_comments()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 42, in _pretty_comments
    self.end = self.code_generator.replace_code_pre(
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 57, in replace_code_pre
    return code.replace(pattern, word)
AttributeError: 'list' object has no attribute 'replace'
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:04:55]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 222, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_nodes.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 28, in visit
    self._pretty_comments()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 42, in _pretty_comments
    self.end = self.code_generator.replace_code_pre(
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 57, in replace_code_pre
    return code.replace(pattern, word)
AttributeError: 'list' object has no attribute 'replace'
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:05:44]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 222, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_nodes.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 28, in visit
    self._pretty_comments()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 42, in _pretty_comments
    self.end = self.code_generator.replace_code_pre(
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 58, in replace_code_pre
    return code.replace(pattern, word)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 58, in replace_code_pre
    return code.replace(pattern, word)
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:08:08]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation Ende
# Allokation Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation Ende
# Zuweisung oder Sub-Zuweisung Start
# Allokation Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 101;  # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 3;  # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 101;  # Wert von 3 in Variable y speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 100;  # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 2;  # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 100;  # Wert von 2 in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 100;  # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 100;  # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 101;  # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 5;  # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 10;  # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetische binäre Operation Ende
STORE ACC 100;  # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully
c
areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:08:14]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation Ende
# Allokation Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation Ende
# Zuweisung oder Sub-Zuweisung Start
# Allokation Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 101;  # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 3;  # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 101;  # Wert von 3 in Variable y speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 100;  # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 2;  # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 100;  # Wert von 2 in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 100;  # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 100;  # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 101;  # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 5;  # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 10;  # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetische binäre Operation Ende
STORE ACC 100;  # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:08:44]
> $ make run-read-compile                                                                                                                                        [±master ●●]
./src/pico_c_compiler.py -p -s 100 -e 200 -m -S ./input.picoc ./output.reti
SUBI SP 1;
LOAD ACC 101;
STOREIN SP ACC 1;
SUBI SP 1;
LOADI ACC 3;
STOREIN SP ACC 1;
STORE ACC 101;
SUBI SP 1;
LOAD ACC 100;
STOREIN SP ACC 1;
SUBI SP 1;
LOADI ACC 2;
STOREIN SP ACC 1;
STORE ACC 100;
SUBI SP 1;
LOAD ACC 100;
STOREIN SP ACC 1;
SUBI SP 1;
LOAD ACC 100;
STOREIN SP ACC 1;
SUBI SP 1;
LOAD ACC 101;
STOREIN SP ACC 1;
SUBI SP 1;
LOADI ACC 5;
STOREIN SP ACC 1;
SUBI SP 1;
LOADI ACC 10;
STOREIN SP ACC 1;
STORE ACC 100;

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:09:09]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation Ende
# Allokation Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation Ende
# Zuweisung oder Sub-Zuweisung Start
# Allokation Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 101;  # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 3;  # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 101;  # Wert von 3 in Variable y speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 100;  # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 2;  # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 100;  # Wert von 2 in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 100;  # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 100;  # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 101;  # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 5;  # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 10;  # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetische binäre Operation Ende
STORE ACC 100;  # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:09:18]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation Ende
# Allokation Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation Ende
# Zuweisung oder Sub-Zuweisung Start
# Allokation Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 101;  # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 3;  # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 101;  # Wert von 3 in Variable y speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 100;  # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 2;  # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 100;  # Wert von 2 in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 100;  # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 100;  # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOAD ACC 101;  # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 5;  # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetischer Operand Start
SUBI SP 1;  # Stack um eine Zelle erweitern
LOADI ACC 10;  # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetische binäre Operation Ende
STORE ACC 100;  # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:09:46]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 226, in _compile
    print(ast_node.show_generated_code())
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 102, in align_comments
    return aligned_code
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 102, in align_comments
    return aligned_code
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:12:53]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation Ende
# Allokation Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation Ende
# Zuweisung oder Sub-Zuweisung Start
# Allokation Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 101;       # Wert von y in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 3;        # Wert von 3 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 101;      # Wert von 3 in Variable y speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 2;        # Wert von 2 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 100;      # Wert von 2 in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 101;       # Wert von y in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 5;        # Wert von z in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 10;       # Wert von 10 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetische binäre Operation Ende
STORE ACC 100;      # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:12:54]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 226, in _compile
    print(ast_node.show_generated_code())
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 95, in align_comments
    for code_line in self._convert_to_lines():
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 111, in _convert_to_lines
    for code_line in code_lines:
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 111, in _convert_to_lines
    for code_line in code_lines:
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:18:03]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation Ende
# Allokation Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation Ende
# Zuweisung oder Sub-Zuweisung Start
# Allokation Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 101;       # Wert von y in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 3;        # Wert von 3 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 101;      # Wert von 3 in Variable y speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 2;        # Wert von 2 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 100;      # Wert von 2 in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 101;       # Wert von y in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 5;        # Wert von z in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 10;       # Wert von 10 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetische binäre Operation Ende
STORE ACC 100;      # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully
c
areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:18:06]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 226, in _compile
    print(ast_node.show_generated_code())
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 95, in align_comments
    for code_line in self._convert_to_lines():
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 114, in _convert_to_lines
    self.max_comment_distance = max(self.max_comment_distance,
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 114, in _convert_to_lines
    self.max_comment_distance = max(self.max_comment_distance,
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:19:12]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 226, in _compile
    print(ast_node.show_generated_code())
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 95, in align_comments
    for code_line in self._convert_to_lines():
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 111, in _convert_to_lines
    for code_line in code_lines:
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 111, in _convert_to_lines
    for code_line in code_lines:
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:19:37]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 226, in _compile
    print(ast_node.show_generated_code())
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 95, in align_comments
    for code_line in self._convert_to_lines():
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 108, in _convert_to_lines
    code_lines += code.split('\n')[:-1]
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 108, in _convert_to_lines
    code_lines += code.split('\n')[:-1]
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:19:53]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 226, in _compile
    print(ast_node.show_generated_code())
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 95, in align_comments
    num_spaces = self.max_comment_distance -\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 106, in _convert_to_lines
    code_lines += code.split('\n')[:-1]
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 106, in _convert_to_lines
    code_lines += code.split('\n')[:-1]
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:20:25]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 226, in _compile
    print(ast_node.show_generated_code())
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 93, in align_comments
    for code_line in self._convert_to_lines():
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 104, in _convert_to_lines
    code_lines = []
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 104, in _convert_to_lines
    code_lines = []
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:20:44]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 226, in _compile
    print(ast_node.show_generated_code())
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 93, in align_comments
    for code_line in self._convert_to_lines():
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 105, in _convert_to_lines
    for code in self.generated_code:
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 105, in _convert_to_lines
    for code in self.generated_code:
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:21:11]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 226, in _compile
    print(ast_node.show_generated_code())
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 93, in align_comments
    for code_line in self._convert_to_lines():
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 112, in _convert_to_lines
    # +2 because comment needs 2 spaces distance from the instruction
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 112, in _convert_to_lines
    # +2 because comment needs 2 spaces distance from the instruction
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:23:30]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation Ende
# Allokation Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation Ende
# Zuweisung oder Sub-Zuweisung Start
# Allokation Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 101;       # Wert von y in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 3;        # Wert von 3 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 101;      # Wert von 3 in Variable y speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 2;        # Wert von 2 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 100;      # Wert von 2 in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 101;       # Wert von y in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 5;        # Wert von z in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 10;       # Wert von 10 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetische binäre Operation Ende
STORE ACC 100;      # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 235, in _compile
    return ast_node.show_generated_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 93, in align_comments
    for code_line in self._convert_to_lines():
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 105, in _convert_to_lines
    code_lines = []
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 105, in _convert_to_lines
    code_lines = []
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:23:52]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation Ende
# Allokation Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation Ende
# Zuweisung oder Sub-Zuweisung Start
# Allokation Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 101;       # Wert von y in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 3;        # Wert von 3 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 101;      # Wert von 3 in Variable y speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 2;        # Wert von 2 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 100;      # Wert von 2 in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 101;       # Wert von y in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 5;        # Wert von z in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 10;       # Wert von 10 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetische binäre Operation Ende
STORE ACC 100;      # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 235, in _compile
    return ast_node.show_generated_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 93, in align_comments
    for code_line in self._convert_to_lines():
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 106, in _convert_to_lines
    for code in self.generated_code:
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 106, in _convert_to_lines
    for code in self.generated_code:
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:23:59]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation Ende
# Allokation Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation Ende
# Zuweisung oder Sub-Zuweisung Start
# Allokation Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 101;       # Wert von y in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 3;        # Wert von 3 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 101;      # Wert von 3 in Variable y speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 2;        # Wert von 2 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 100;      # Wert von 2 in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 100;       # Wert von x in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOAD ACC 101;       # Wert von y in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 5;        # Wert von z in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetischer Operand Start
SUBI SP 1;          # Stack um eine Zelle erweitern
LOADI ACC 10;       # Wert von 10 in ACC laden
STOREIN SP ACC 1;   # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetische binäre Operation Ende
STORE ACC 100;      # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 235, in _compile
    return ast_node.show_generated_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 93, in align_comments
    for code_line in self._convert_to_lines():
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 105, in _convert_to_lines
    code_lines += code.split('\n')[:-1]
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 105, in _convert_to_lines
    code_lines += code.split('\n')[:-1]
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
Traceback (most recent call last):ompile-comments] Error 1
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 226, in _compile
    print(ast_node.show_generated_code())
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 31, in show_generated_code
    return self.code_generator.show_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 65, in show_code
    return self.code_arranger.align_comments() if global_vars.args.verbose\
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 93, in align_comments
    for code_line in self._convert_to_lines():
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 113, in _convert_to_lines
    return code_lines
  File "/home/areo/Documents/Studium/pico_c_compiler/src/code_generator.py", line 113, in _convert_to_lines
    return code_lines
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [4:31:23]
> $ make run-read-compile-comments                                                                                                                              [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation Ende
# Allokation Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation Ende
# Zuweisung oder Sub-Zuweisung Start
# Allokation Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Ende
# Arithmetische binäre Operation Ende
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [4:31:24]
> $ make run-read-compile-comments                                                                                                                              [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 6, in <module>
    from grammar import Grammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 1, in <module>
    from parse_fun import FunctionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 1, in <module>
    from parse_stmts import StatementGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 1, in <module>
    from parse_assign_alloc import AssignmentAllocationGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_assign_alloc.py", line 1, in <module>
    from parse_logic_exp import LogicExpressionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 1, in <module>
    from parse_arithmetic_exp import ArithmeticExpressionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_arithmetic_exp.py", line 2, in <module>
    from arithmetic_nodes import ArithUnOp, ArithBinOp, Identifier, Number, Character
  File "/home/areo/Documents/Studium/pico_c_compiler/src/arithmetic_nodes.py", line 161
    class ArithUnOp(ASTNode):
IndentationError: expected an indented block after 'case' statement on line 157
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [4:38:48]
> $ make run-read-compile-comments                                                                                                                              [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 222, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_nodes.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 35, in visit
    statement.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 38, in visit
    self._assignment()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 71, in _assignment
    self.expression.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/arithmetic_nodes.py", line 110, in visit
    self.right_operand.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/arithmetic_nodes.py", line 109, in visit
    self.left_operand.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/arithmetic_nodes.py", line 116, in visit
    self.code_generator.add_code(self.end, self.end_loc)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/arithmetic_nodes.py", line 116, in visit
    self.code_generator.add_code(self.end, self.end_loc)
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [4:43:01]
> $ make run-read-compile-comments                                                                                                                              [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 6, in <module>
    from grammar import Grammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 1, in <module>
    from parse_fun import FunctionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 1, in <module>
    from parse_stmts import StatementGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 1, in <module>
    from parse_assign_alloc import AssignmentAllocationGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_assign_alloc.py", line 1, in <module>
    from parse_logic_exp import LogicExpressionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 1, in <module>
    from parse_arithmetic_exp import ArithmeticExpressionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_arithmetic_exp.py", line 1, in <module>
    from parser import BacktrackingParser
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 1, in <module>
    from ast_builder import ASTBuilder
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_builder.py", line 3, in <module>
    from file_nodes import File
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_nodes.py", line 2, in <module>
    from function_nodes import MainFunction
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 5, in <module>
    class MainFunction(ASTNode):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 11, in MainFunction
    end = strip_multiline_string("""# code(af)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 56, in strip_multiline_string
    return mutline_string
  File "/usr/lib/python3.10/bdb.py", line 94, in trace_dispatch
    return self.dispatch_return(frame, arg)
  File "/usr/lib/python3.10/bdb.py", line 156, in dispatch_return
    if self.quitting: raise BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [4:43:15]
> $ make run-read-compile-comments                                                                                                                              [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 6, in <module>
    from grammar import Grammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 1, in <module>
    from parse_fun import FunctionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 1, in <module>
    from parse_stmts import StatementGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 1, in <module>
    from parse_assign_alloc import AssignmentAllocationGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_assign_alloc.py", line 1, in <module>
    from parse_logic_exp import LogicExpressionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 1, in <module>
    from parse_arithmetic_exp import ArithmeticExpressionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_arithmetic_exp.py", line 1, in <module>
    from parser import BacktrackingParser
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 1, in <module>
    from ast_builder import ASTBuilder
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_builder.py", line 3, in <module>
    from file_nodes import File
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_nodes.py", line 2, in <module>
    from function_nodes import MainFunction
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 5, in <module>
    class MainFunction(ASTNode):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 11, in MainFunction
    end = strip_multiline_string("""# code(af)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 53, in strip_multiline_string
    mutline_string = ''.join(
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 53, in strip_multiline_string
    mutline_string = ''.join(
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [4:47:35]
> $                                                                                                                                                             [±master ●●]

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [4:47:35]
> $ make run-read-compile-comments                                                                                                                              [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 6, in <module>
    from grammar import Grammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 1, in <module>
    from parse_fun import FunctionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 1, in <module>
    from parse_stmts import StatementGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 1, in <module>
    from parse_assign_alloc import AssignmentAllocationGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_assign_alloc.py", line 1, in <module>
    from parse_logic_exp import LogicExpressionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 1, in <module>
    from parse_arithmetic_exp import ArithmeticExpressionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_arithmetic_exp.py", line 1, in <module>
    from parser import BacktrackingParser
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 1, in <module>
    from ast_builder import ASTBuilder
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_builder.py", line 3, in <module>
    from file_nodes import File
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_nodes.py", line 2, in <module>
    from function_nodes import MainFunction
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 5, in <module>
    class MainFunction(ASTNode):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 11, in MainFunction
    end = strip_multiline_string("""# code(af)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 56, in strip_multiline_string
    return mutline_string
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 56, in strip_multiline_string
    return mutline_string
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [4:47:47]
> $ make run-read-compile-comments                                                                                                                              [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation Ende
# Allokation Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation Ende
# Zuweisung oder Sub-Zuweisung Start
# Allokation Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# codeaa(3) (oder codela(3), falls logischer Ausdruck)
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# codeaa(2) (oder codela(2), falls logischer Ausdruck)
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation Start
# Arithmetische binäre Operation Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# codeaa(y)
# codeaa(z)
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation Ende
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# codeaa((y * z))
# codeaa(10)
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation Ende
# codeaa(x)
# codeaa(((y * z) + 10))
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation Ende
# codeaa((x + ((y * z) + 10))) (oder codela((x + ((y * z) + 10))), falls logischer Ausdruck)
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# code((int x) ... )
JUMP 0;
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [4:47:54]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation Ende
# Allokation Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation Ende
# Zuweisung oder Sub-Zuweisung Start
# Allokation Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# codeaa(3) (oder codela(3), falls logischer Ausdruck)
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# codeaa(2) (oder codela(2), falls logischer Ausdruck)
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# Zuweisung oder Sub-Zuweisung Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# codeaa(y)
# codeaa(z)
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand Ende
# codeaa((y * z))
# codeaa(10)
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
# codeaa(x)
# codeaa(((y * z) + 10))
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
# codeaa((x + ((y * z) + 10))) (oder codela((x + ((y * z) + 10))), falls logischer Ausdruck)
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung oder Sub-Zuweisung Ende
# code((int x) ... )
JUMP 0;
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [4:53:12]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 5) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung ((const int z) = 5) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand 3 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
# codeaa(3) (oder codela(3), falls logischer Ausdruck)
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 2) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 2 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
# codeaa(2) (oder codela(2), falls logischer Ausdruck)
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# Zuweisung (x = (x + ((y * z) + 10))) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand z Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
# codeaa(y)
# codeaa(z)
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
# codeaa((y * z))
# codeaa(10)
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
# codeaa(x)
# codeaa(((y * z) + 10))
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
# codeaa((x + ((y * z) + 10))) (oder codela((x + ((y * z) + 10))), falls logischer Ausdruck)
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung (x = (x + ((y * z) + 10))) Ende
# code((int x) ... )
JUMP 0;
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [5:07:47]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# Main Funktion Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 5) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung ((const int z) = 5) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand 3 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 2) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 2 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# Zuweisung (x = (x + ((y * z) + 10))) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand z Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung (x = (x + ((y * z) + 10))) Ende
JUMP 0;
# Main Funktion Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (3, 4)      100
y       variable        int         (4, 4)      101
z       named constant  int         (5, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [6:12:41]
> $ make                                                                                                                                                         [±master ●●]
./src/pico_c_compiler.py -p -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 13, in start_parse
    self.code_fi()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 11, in code_fi
    self._file()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 16, in _file
    self.add_and_match([TT.IDENTIFIER], NT.Filename)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 78, in add_and_match
    self._add(classname, mapping)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 97, in _add
    classname(self.LT(1).value,
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 32, in LT
    self._sync(i)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 109, in _sync
    self._fill(not_filled_up)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 118, in _fill
    self.lts += [self.lexer.next_token()]
  File "/home/areo/Documents/Studium/pico_c_compiler/src/lexer.py", line 213, in next_token
    raise InvalidCharacterError(self.lc, self.position)
errors.InvalidCharacterError: InvalidCharacterError: '.' is not a permitted character

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 213, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 33, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 71, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:9: run-read-compile] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:20:36]
> $ make                                                                                                                                                         [±master ●●]
./src/pico_c_compiler.py -p -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 213, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 13, in start_parse
    self.code_fi()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 11, in code_fi
    self._file()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 16, in _file
    self.add_and_match([TT.FILENAME], NT.Filename)
  File "/usr/lib/python3.10/enum.py", line 437, in __getattr__
    raise AttributeError(name) from None
AttributeError: FILENAME
make: *** [Makefile:9: run-read-compile] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:28:18]
> $ make                                                                                                                                                         [±master ●●]
./src/pico_c_compiler.py -p -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 14, in start_parse
    self.match([TT.EOF])
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 68, in match
    raise MismatchedTokenError(tokentypes, self.LT(1))
errors.MismatchedTokenError: MismatchedTokenError: Expected '[<TT.EOF: 'end of file'>]', found '.picocvoid'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 213, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 51, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 71, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:9: run-read-compile] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:28:51]
> $ make                                                                                                                                                         [±master ●●]
./src/pico_c_compiler.py -p -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 14, in start_parse
    self.match([TT.EOF])
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 68, in match
    raise MismatchedTokenError(tokentypes, self.LT(1))
errors.MismatchedTokenError: MismatchedTokenError: Expected '[<TT.EOF: 'end of file'>]', found '.picocvoid'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 213, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 51, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 71, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:9: run-read-compile] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:29:39]
> $ make                                                                                                                                                         [±master ●●]
./src/pico_c_compiler.py -p -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 14, in start_parse
    self.match([TT.EOF])
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 68, in match
    raise MismatchedTokenError(tokentypes, self.LT(1))
errors.MismatchedTokenError: MismatchedTokenError: Expected '[<TT.EOF: 'end of file'>]', found '.picocvoid'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 213, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 51, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 71, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:9: run-read-compile] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:34:09]
> $ make                                                                                                                                                         [±master ●●]
./src/pico_c_compiler.py -p -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 14, in start_parse
    self.match([TT.EOF])
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 68, in match
    raise MismatchedTokenError(tokentypes, self.LT(1))
errors.MismatchedTokenError: MismatchedTokenError: Expected '[<TT.EOF: 'end of file'>]', found 'main'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 213, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 51, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 71, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:9: run-read-compile] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:35:15]
> $ make run-read-tokens                                                                                                                                         [±master ●●]
./src/pico_c_compiler.py -t -p -v -m ./input.picoc ./output.reti
[<TT.NAME,'./input.picocvoid',(0, 0)>, <TT.MAIN,'main',(1, 5)>, <TT.L_PAREN,'(',(1, 9)>, <TT.R_PAREN,')',(1, 10)>, <TT.L_BRACE,'{',(2, 0)>, <TT.INT,'int',(4, 0)>, <TT.NAME,'x',(4, 4)>, <TT.SEMICOLON,';',(4, 5)>, <TT.INT,'int',(5, 0)>, <TT.NAME,'y',(5, 4)>, <TT.SEMICOLON,';',(5, 5)>, <TT.CONST,'const',(6, 0)>, <TT.INT,'int',(6, 6)>, <TT.NAME,'z',(6, 10)>, <TT.ASSIGNMENT,'=',(6, 12)>, <TT.NUMBER,'5',(6, 14)>, <TT.SEMICOLON,';',(6, 15)>, <TT.NAME,'y',(8, 0)>, <TT.ASSIGNMENT,'=',(8, 2)>, <TT.NUMBER,'3',(8, 4)>, <TT.SEMICOLON,';',(8, 5)>, <TT.NAME,'x',(9, 0)>, <TT.ASSIGNMENT,'=',(9, 2)>, <TT.NUMBER,'2',(9, 4)>, <TT.SEMICOLON,';',(9, 5)>, <TT.NAME,'x',(10, 0)>, <TT.ASSIGNMENT,'=',(10, 2)>, <TT.L_PAREN,'(',(10, 4)>, <TT.NAME,'x',(10, 5)>, <TT.PLUS_OP,'+',(10, 7)>, <TT.L_PAREN,'(',(10, 9)>, <TT.L_PAREN,'(',(10, 10)>, <TT.NAME,'y',(10, 11)>, <TT.MUL_OP,'*',(10, 13)>, <TT.NAME,'z',(10, 15)>, <TT.R_PAREN,')',(10, 16)>, <TT.PLUS_OP,'+',(10, 18)>, <TT.NUMBER,'10',(10, 20)>, <TT.R_PAREN,')',(10, 22)>, <TT.R_PAREN,')',(10, 23)>, <TT.SEMICOLON,';',(10, 24)>, <TT.R_BRACE,'}',(11, 0)>]
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:35:32]
> $ make run-read-tokens                                                                                                                                         [±master ●●]
./src/pico_c_compiler.py -t -p -v -m ./input.picoc ./output.reti
[<TT.NAME,'./input.picoc',(0, 0)>, <TT.VOID,'void',(1, 0)>, <TT.MAIN,'main',(1, 5)>, <TT.L_PAREN,'(',(1, 9)>, <TT.R_PAREN,')',(1, 10)>, <TT.L_BRACE,'{',(2, 0)>, <TT.INT,'int',(4, 0)>, <TT.NAME,'x',(4, 4)>, <TT.SEMICOLON,';',(4, 5)>, <TT.INT,'int',(5, 0)>, <TT.NAME,'y',(5, 4)>, <TT.SEMICOLON,';',(5, 5)>, <TT.CONST,'const',(6, 0)>, <TT.INT,'int',(6, 6)>, <TT.NAME,'z',(6, 10)>, <TT.ASSIGNMENT,'=',(6, 12)>, <TT.NUMBER,'5',(6, 14)>, <TT.SEMICOLON,';',(6, 15)>, <TT.NAME,'y',(8, 0)>, <TT.ASSIGNMENT,'=',(8, 2)>, <TT.NUMBER,'3',(8, 4)>, <TT.SEMICOLON,';',(8, 5)>, <TT.NAME,'x',(9, 0)>, <TT.ASSIGNMENT,'=',(9, 2)>, <TT.NUMBER,'2',(9, 4)>, <TT.SEMICOLON,';',(9, 5)>, <TT.NAME,'x',(10, 0)>, <TT.ASSIGNMENT,'=',(10, 2)>, <TT.L_PAREN,'(',(10, 4)>, <TT.NAME,'x',(10, 5)>, <TT.PLUS_OP,'+',(10, 7)>, <TT.L_PAREN,'(',(10, 9)>, <TT.L_PAREN,'(',(10, 10)>, <TT.NAME,'y',(10, 11)>, <TT.MUL_OP,'*',(10, 13)>, <TT.NAME,'z',(10, 15)>, <TT.R_PAREN,')',(10, 16)>, <TT.PLUS_OP,'+',(10, 18)>, <TT.NUMBER,'10',(10, 20)>, <TT.R_PAREN,')',(10, 22)>, <TT.R_PAREN,')',(10, 23)>, <TT.SEMICOLON,';',(10, 24)>, <TT.R_BRACE,'}',(11, 0)>]
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:43:06]
> $ make run-read-ast                                                                                                                                            [±master ●●]
./src/pico_c_compiler.py -a -p -m ./input.picoc ./output.reti
((./input.picoc (void main (int x) (int y) ((const int z) = 5) (y = 3) (x = 2) (x = (x + ((y * z) + 10))))))
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:43:34]
> $ make run-read-ast                                                                                                                                            [±master ●●]
./src/pico_c_compiler.py -a -p -m ./input.picoc ./output.reti
(./input.picoc (void main (int x) (int y) ((const int z) = 5) (y = 3) (x = 2) (x = (x + ((y * z) + 10)))))
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:47:53]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 223, in _compile
    error_handler.handle(ast_node.visit)
AttributeError: 'Root' object has no attribute 'visit'
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:48:17]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 210, in _compile
    grammar = Grammar(lexer)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 25, in __init__
    self.ast_builder = ASTBuilder()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_builder.py", line 9, in __init__
    root = NT.Root()
AttributeError: type object 'NT' has no attribute 'Root'
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:55:04]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 223, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/root_node.py", line 17, in visit
    for file in self.files:
AttributeError: 'Root' object has no attribute 'files'
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:55:40]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# File ./input.picoc Start
# Main Funktion Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 5) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung ((const int z) = 5) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand 3 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 2) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 2 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# Zuweisung (x = (x + ((y * z) + 10))) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand z Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung (x = (x + ((y * z) + 10))) Ende
JUMP 0;
# Main Funktion Ende
# File ./input.picoc Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (4, 4)      100
y       variable        int         (5, 4)      101
z       named constant  int         (6, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:56:08]
> $ make run-read-ast                                                                                                                                            [±master ●●]
./src/pico_c_compiler.py -a -p -m ./input.picoc ./output.reti
(./input.picoc (void main (int x) (int y) ((const int z) = 5) (y = 3) (x = 2) (x = (x + ((y * z) + 10)))))
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:57:44]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# File ./input.picoc Start
# Main Funktion Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 5) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung ((const int z) = 5) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand 3 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 2) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 2 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# Zuweisung (x = (x + ((y * z) + 10))) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand z Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung (x = (x + ((y * z) + 10))) Ende
JUMP 0;
# Main Funktion Ende
# File ./input.picoc Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (4, 4)      100
y       variable        int         (5, 4)      101
z       named constant  int         (6, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [7:57:53]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# File ./input.picoc Start
# Main Funktion Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 5) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung ((const int z) = 5) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand 3 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 2) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 2 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# Zuweisung (x = (x + ((y * z) + 10))) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand z Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung (x = (x + ((y * z) + 10))) Ende
JUMP 0;
# Main Funktion Ende
# File ./input.picoc Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (4, 4)      100
y       variable        int         (5, 4)      101
z       named constant  int         (6, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:02:17]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# File ./input.picoc Start
# Main Funktion Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 5) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung ((const int z) = 5) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand 3 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 2) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 2 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# Zuweisung (x = (x + ((y * z) + 10))) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand z Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung (x = (x + ((y * z) + 10))) Ende
JUMP 0;
# Main Funktion Ende
# File ./input.picoc Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (4, 4)      100
y       variable        int         (5, 4)      101
z       named constant  int         (6, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:02:20]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# File ./input.picoc Start
# Main Funktion Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 5) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung ((const int z) = 5) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand 3 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 2) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 2 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# Zuweisung (x = (x + ((y * z) + 10))) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand z Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung (x = (x + ((y * z) + 10))) Ende
JUMP 0;
# Main Funktion Ende
# File ./input.picoc Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (4, 4)      100
y       variable        int         (5, 4)      101
z       named constant  int         (6, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:14:52]
> $ make run-read-compile-comments                                                                                                                               [±master ●●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# File ./input.picoc Start
# Main Funktion Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 5) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung ((const int z) = 5) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand 3 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 2) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 2 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# Zuweisung (x = (x + ((y * z) + 10))) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand z Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung (x = (x + ((y * z) + 10))) Ende
JUMP 0;
# Main Funktion Ende
# File ./input.picoc Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (4, 4)      100
y       variable        int         (5, 4)      101
z       named constant  int         (6, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:16:29]
> $ git_acp "comments are aligned, added File and Root Node"                                                                                                     [±master ●●]
[master c243a28] comments are aligned, added File and Root Node
 25 files changed, 364 insertions(+), 227 deletions(-)
 create mode 100644 .misc/blockeintrag.txt
 create mode 100644 src/parse_file.py
 rename src/{file_nodes.py => file_node.py} (57%)
 create mode 100644 src/root_node.py
Enumerating objects: 50, done.
Counting objects: 100% (50/50), done.
Delta compression using up to 2 threads
Compressing objects: 100% (29/29), done.
Writing objects: 100% (29/29), 10.40 KiB | 5.20 MiB/s, done.
Total 29 (delta 20), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (20/20), completed with 20 local objects.
To github.com-2:matthejue/PicoC-Compiler.git
   df71de5..c243a28  master -> master

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:17:57]
> $ make run-read-compile                                                                                                                                         [±master ✓]
./src/pico_c_compiler.py -p -s 100 -e 200 -m -S ./input.picoc ./output.reti
SUBI SP 1;
LOAD ACC 101;
STOREIN SP ACC 1;
SUBI SP 1;
LOADI ACC 3;
STOREIN SP ACC 1;
LOADIN SP ACC 1;
ADDI SP 1;
STORE ACC 101;
SUBI SP 1;
LOAD ACC 100;
STOREIN SP ACC 1;
SUBI SP 1;
LOADI ACC 2;
STOREIN SP ACC 1;
LOADIN SP ACC 1;
ADDI SP 1;
STORE ACC 100;
SUBI SP 1;
LOAD ACC 100;
STOREIN SP ACC 1;
SUBI SP 1;
LOAD ACC 100;
STOREIN SP ACC 1;
SUBI SP 1;
LOAD ACC 101;
STOREIN SP ACC 1;
SUBI SP 1;
LOADI ACC 5;
STOREIN SP ACC 1;
LOADIN SP ACC 2;
LOADIN SP IN2 1;
MUL ACC IN2;
STOREIN SP ACC 2;
ADDI SP 1;
SUBI SP 1;
LOADI ACC 10;
STOREIN SP ACC 1;
LOADIN SP ACC 2;
LOADIN SP IN2 1;
ADD ACC IN2;
STOREIN SP ACC 2;
ADDI SP 1;
LOADIN SP ACC 2;
LOADIN SP IN2 1;
ADD ACC IN2;
STOREIN SP ACC 2;
ADDI SP 1;
LOADIN SP ACC 1;
ADDI SP 1;
STORE ACC 100;

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (4, 4)      100
y       variable        int         (5, 4)      101
z       named constant  int         (6, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:18:06]
> $ make run-read-ast                                                                                                                                             [±master ✓]
./src/pico_c_compiler.py -a -p -m ./input.picoc ./output.reti
(./input.picoc (void main (int x) (int y) ((const int z) = 5) (y = 3) (x = 2) (x = (x + ((y * z) + 10)))))
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:23:11]
> $ make run-read-compile                                                                                                                                         [±master ✓]
./src/pico_c_compiler.py -p -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/arithmetic_nodes.py", line 28, in visit
    self._adapt_code()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/arithmetic_nodes.py", line 41, in _adapt_code
    symbol = self.symbol_table.resolve(value)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/symbol_table.py", line 95, in resolve
    return self.symbols[name]
KeyError: 'z'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 223, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/root_node.py", line 16, in visit
    self.root_file.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_node.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 33, in visit
    statement.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 42, in visit
    self._assignment()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 75, in _assignment
    self.expression.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/arithmetic_nodes.py", line 111, in visit
    self.right_operand.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/arithmetic_nodes.py", line 110, in visit
    self.left_operand.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/arithmetic_nodes.py", line 111, in visit
    self.right_operand.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/arithmetic_nodes.py", line 31, in visit
    raise UnknownIdentifierError(self.value)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/errors.py", line 51, in __init__
    f"'{found.value}' wasn't declared yet."
AttributeError: 'str' object has no attribute 'value'
make: *** [Makefile:9: run-read-compile] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:31:10]
> $ make run-read-compile                                                                                                                                         [±master ●]
./src/pico_c_compiler.py -p -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 42, in visit
    self._assignment()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 66, in _assignment
    self.symbol_table.resolve(name).value = value
  File "/home/areo/Documents/Studium/pico_c_compiler/src/symbol_table.py", line 95, in resolve
    return self.symbols[name]
KeyError: 'z'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/root_node.py", line 16, in visit
    self.root_file.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_node.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 33, in visit
    statement.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 45, in visit
    raise UnknownIdentifierError(self.location)
errors.UnknownIdentifierError: UnknownIdentifierError: Identifier 'None' wasn't declared yet.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 223, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 64, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 71, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:9: run-read-compile] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:32:54]
> $ make run-read-compile                                                                                                                                         [±master ●]
./src/pico_c_compiler.py -p -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 42, in visit
    self._assignment()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 66, in _assignment
    self.symbol_table.resolve(name).value = value
  File "/home/areo/Documents/Studium/pico_c_compiler/src/symbol_table.py", line 95, in resolve
    return self.symbols[name]
KeyError: 'z'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/root_node.py", line 16, in visit
    self.root_file.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_node.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 33, in visit
    statement.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 45, in visit
    raise UnknownIdentifierError(self.location)
errors.UnknownIdentifierError: UnknownIdentifierError: Identifier 'None' wasn't declared yet.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 223, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 64, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 71, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:9: run-read-compile] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:33:43]
> $ make run-read-compile                                                                                                                                         [±master ●]
./src/pico_c_compiler.py -p -s 100 -e 200 -m -S ./input.picoc ./output.reti
SUBI SP 1;
LOAD ACC 101;
STOREIN SP ACC 1;
SUBI SP 1;
LOADI ACC 3;
STOREIN SP ACC 1;
LOADIN SP ACC 1;
ADDI SP 1;
STORE ACC 101;
SUBI SP 1;
LOAD ACC 100;
STOREIN SP ACC 1;
SUBI SP 1;
LOADI ACC 2;
STOREIN SP ACC 1;
LOADIN SP ACC 1;
ADDI SP 1;
STORE ACC 100;
SUBI SP 1;
LOAD ACC 100;
STOREIN SP ACC 1;
SUBI SP 1;
LOAD ACC 100;
STOREIN SP ACC 1;
SUBI SP 1;
LOAD ACC 101;
STOREIN SP ACC 1;
SUBI SP 1;
LOADI ACC 5;
STOREIN SP ACC 1;
LOADIN SP ACC 2;
LOADIN SP IN2 1;
MUL ACC IN2;
STOREIN SP ACC 2;
ADDI SP 1;
SUBI SP 1;
LOADI ACC 10;
STOREIN SP ACC 1;
LOADIN SP ACC 2;
LOADIN SP IN2 1;
ADD ACC IN2;
STOREIN SP ACC 2;
ADDI SP 1;
LOADIN SP ACC 2;
LOADIN SP IN2 1;
ADD ACC IN2;
STOREIN SP ACC 2;
ADDI SP 1;
LOADIN SP ACC 1;
ADDI SP 1;
STORE ACC 100;

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (4, 4)      100
y       variable        int         (5, 4)      101
z       named constant  int         (6, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:36:09]
> $ make run-read-compile-comments                                                                                                                                [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# File ./input.picoc Start
# Main Funktion Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 5) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung ((const int z) = 5) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand 3 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 2) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetischer Operand 2 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# Zuweisung (x = (x + ((y * z) + 10))) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand z Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung (x = (x + ((y * z) + 10))) Ende
JUMP 0;
# Main Funktion Ende
# File ./input.picoc Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (4, 4)      100
y       variable        int         (5, 4)      101
z       named constant  int         (6, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:36:13]
> $ make run-read-compile-comments                                                                                                                                [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 42, in visit
    self._assignment()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 66, in _assignment
    self.symbol_table.resolve(name).value = value
  File "/home/areo/Documents/Studium/pico_c_compiler/src/symbol_table.py", line 95, in resolve
    return self.symbols[name]
KeyError: 'z'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/root_node.py", line 16, in visit
    self.root_file.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_node.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 33, in visit
    statement.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 45, in visit
    raise UnknownIdentifierError(self.location)
errors.UnknownIdentifierError: UnknownIdentifierError: Identifier 'None' wasn't declared yet.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 223, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 64, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 71, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:38:35]
> $ make run-read-compile-comments                                                                                                                                [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 42, in visit
    self._assignment()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 66, in _assignment
    self.symbol_table.resolve(name).value = value
  File "/home/areo/Documents/Studium/pico_c_compiler/src/symbol_table.py", line 95, in resolve
    return self.symbols[name]
KeyError: 'z'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/root_node.py", line 16, in visit
    self.root_file.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_node.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 33, in visit
    statement.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 45, in visit
    raise UnknownIdentifierError(self.location)
errors.UnknownIdentifierError: UnknownIdentifierError: Identifier 'None' wasn't declared yet.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 223, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 64, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 71, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [8:39:13]
> $ make run-read-compile-comments                                                                                                                                [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 223, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/root_node.py", line 16, in visit
    self.root_file.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_node.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 33, in visit
    statement.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 40, in visit
    self._assignment()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 40, in visit
    self._assignment()
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [14:49:01]
> $ make run-read-compile-comments                                                                                                                                [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 6, in <module>
    from grammar import Grammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 1, in <module>
    from parse_file import FileGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 1, in <module>
    from parse_fun import FunctionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 1, in <module>
    from parse_stmts import StatementGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 1, in <module>
    from parse_assign_alloc import AssignmentAllocationGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_assign_alloc.py", line 2, in <module>
    from assignment_allocation_nodes import Assign, Alloc
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 7, in <module>
    from assignment_allocation_nodes import IdentifierAssign
ImportError: cannot import name 'IdentifierAssign' from partially initialized module 'assignment_allocation_nodes' (most likely due to a circular import) (/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py)
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [14:49:03]
> $ make run-read-compile-comments                                                                                                                                [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 6, in <module>
    from grammar import Grammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 1, in <module>
    from parse_file import FileGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 1, in <module>
    from parse_fun import FunctionGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 1, in <module>
    from parse_stmts import StatementGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 1, in <module>
    from parse_assign_alloc import AssignmentAllocationGrammar
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_assign_alloc.py", line 2, in <module>
    from assignment_allocation_nodes import Assign, Alloc
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 7, in <module>
    from assignment_allocation_nodes import IdentifierAssign
ImportError: cannot import name 'IdentifierAssign' from partially initialized module 'assignment_allocation_nodes' (most likely due to a circular import) (/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py)
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [14:56:59]
> $ make run-read-compile-comments                                                                                                                                [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 223, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/root_node.py", line 16, in visit
    self.root_file.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_node.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 33, in visit
    statement.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 40, in visit

  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 40, in visit

  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/site-packages/pudb/debugger.py", line 210, in dispatch_line
    raise bdb.BdbQuit
bdb.BdbQuit
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [15:00:24]
> $ make run-read-compile-comments                                                                                                                                [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 223, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/root_node.py", line 16, in visit
    self.root_file.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_node.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 33, in visit
    statement.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 36, in visit
    self.location.update_match_args()
AttributeError: 'Identifier' object has no attribute '_update_match_args'
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [15:01:38]
> $ make run-read-compile-comments                                                                                                                                [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 223, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/root_node.py", line 16, in visit
    self.root_file.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_node.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 33, in visit
    statement.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 36, in visit
    self.location._update_match_args()
AttributeError: 'Identifier' object has no attribute '_update_match_args'
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [15:02:10]
> $ make run-read-compile-comments                                                                                                                                [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# File ./input.picoc Start
# Main Funktion Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 5) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung ((const int z) = 5) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand 3 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 2) Start
# Arithmetischer Operand 2 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# Zuweisung (x = (x + ((y * z) + 10))) Start
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand z Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung (x = (x + ((y * z) + 10))) Ende
JUMP 0;
# Main Funktion Ende
# File ./input.picoc Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (4, 4)      100
y       variable        int         (5, 4)      101
z       named constant  int         (6, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [15:05:42]
> $ make run-read-compile-comments                                                                                                                                [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 120, in main
    _read_and_write_file(infile, outfile)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 166, in _read_and_write_file
    output = _compile(infile, pico_c_in)
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 223, in _compile
    error_handler.handle(ast_node.visit)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/root_node.py", line 16, in visit
    self.root_file.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/file_node.py", line 24, in visit
    self.main_function.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/function_nodes.py", line 33, in visit
    statement.visit()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 35, in visit
    self.location._update_match_args()
AttributeError: 'Alloc' object has no attribute '_update_match_args'. Did you mean: 'update_match_args'?
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [15:23:58]
> $ make run-read-compile-comments                                                                                                                                [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
# File ./input.picoc Start
# Main Funktion Start
LOADI SP 200;
# Allokation (int x) Start
# Variable x vom Typ int mit Adresse 100 zur Symboltabelle hinzugefügt
# Allokation (int x) Ende
# Allokation (int y) Start
# Variable y vom Typ int mit Adresse 101 zur Symboltabelle hinzugefügt
# Allokation (int y) Ende
# Zuweisung ((const int z) = 5) Start
# Allokation (const int z) Start
# Konstante z vom Typ int zur Symboltabelle hinzugefügt
# Allokation (const int z) Ende
# Konstante z in Symboltabelle den Wert 5 zugewiesen
# Zuweisung ((const int z) = 5) Ende
# Zuweisung (y = 3) Start
# Arithmetischer Operand 3 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 3;       # Wert von 3 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 3 Ende
LOADIN SP ACC 1;   # Wert von 3 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 101;     # Wert von 3 in Variable y speichern
# Zuweisung (y = 3) Ende
# Zuweisung (x = 2) Start
# Arithmetischer Operand 2 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 2;       # Wert von 2 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 2 Ende
LOADIN SP ACC 1;   # Wert von 2 in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von 2 in Variable x speichern
# Zuweisung (x = 2) Ende
# Zuweisung (x = (x + ((y * z) + 10))) Start
# Arithmetische binäre Operation (x + ((y * z) + 10)) Start
# Arithmetischer Operand x Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 100;      # Wert von x in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand x Ende
# Arithmetische binäre Operation ((y * z) + 10) Start
# Arithmetische binäre Operation (y * z) Start
# Arithmetischer Operand y Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOAD ACC 101;      # Wert von y in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand y Ende
# Arithmetischer Operand z Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 5;       # Wert von z in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand z Ende
LOADIN SP ACC 2;   # Wert von y in ACC laden
LOADIN SP IN2 1;   # Wert von z in IN2 laden
MUL ACC IN2;       # Wert von (y * z) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (y * z) Ende
# Arithmetischer Operand 10 Start
SUBI SP 1;         # Stack um eine Zelle erweitern
LOADI ACC 10;      # Wert von 10 in ACC laden
STOREIN SP ACC 1;  # Wert in oberste Stacke-Zelle
# Arithmetischer Operand 10 Ende
LOADIN SP ACC 2;   # Wert von (y * z) in ACC laden
LOADIN SP IN2 1;   # Wert von 10 in IN2 laden
ADD ACC IN2;       # Wert von ((y * z) + 10) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation ((y * z) + 10) Ende
LOADIN SP ACC 2;   # Wert von x in ACC laden
LOADIN SP IN2 1;   # Wert von ((y * z) + 10) in IN2 laden
ADD ACC IN2;       # Wert von (x + ((y * z) + 10)) in ACC laden
STOREIN SP ACC 2;  # Ergebnis in zweitoberste Stack-Zelle
ADDI SP 1;         # Stack um eine Zelle verkürzen
# Arithmetische binäre Operation (x + ((y * z) + 10)) Ende
LOADIN SP ACC 1;   # Wert von (x + ((y * z) + 10)) in ACC laden
ADDI SP 1;         # Stack um eine Zelle verkürzen
STORE ACC 100;     # Wert von (x + ((y * z) + 10)) in Variable x speichern
# Zuweisung (x = (x + ((y * z) + 10))) Ende
JUMP 0;
# Main Funktion Ende
# File ./input.picoc Ende

name    type            datatype    position    value
------  --------------  ----------  ----------  -------
int     built in        None        None        None
char    built in        None        None        None
x       variable        int         (4, 4)      100
y       variable        int         (5, 4)      101
z       named constant  int         (6, 10)     5
Compiled successfully

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [15:24:15]
> $ make run-read-compile-comments                                                                                                                               [±master ●]
./src/pico_c_compiler.py -p -v -s 100 -e 200 -m -S ./input.picoc ./output.reti
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 5, in <module>
    from lexer import Lexer, TT
  File "/home/areo/Documents/Studium/pico_c_compiler/src/lexer.py", line 1, in <module>
    from errors import InvalidCharacterError
ImportError: cannot import name 'InvalidCharacterError' from 'errors' (/home/areo/Documents/Studium/pico_c_compiler/src/errors.py)
make: *** [Makefile:12: run-read-compile-comments] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                   [17:52:35]
> $ make run-shell-ast                                                                                                                                            [±master ●]
./src/pico_c_compiler.py -a -m
pico_c > int var = 10 + 1
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 23, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 13, in start_parse
    self.code_fi()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 9, in code_fi
    self._file()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 14, in _file
    self.add_and_match([TT.NAME], NT.Filename)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 84, in add_and_match
    self.match(tokentypes)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 70, in match
    raise Errors.MismatchedTokenError(
errors.Errors.MismatchedTokenError: MismatchedTokenError: Expected ''name'', found '<'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 154, in _shell
    _compile('<stdin>', [pico_c_in])
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 214, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 43, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 63, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:33: run-shell-ast] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [1:31:44]
> $ make run-shell-ast                                                                                                                                            [±master ●]
./src/pico_c_compiler.py -a -m
pico_c > int var = 10;
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 23, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 13, in start_parse
    self.code_fi()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 9, in code_fi
    self._file()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 14, in _file
    self.add_and_match([TT.NAME], NT.Filename)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 84, in add_and_match
    self.match(tokentypes)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 70, in match
    raise Errors.MismatchedTokenError(
errors.Errors.MismatchedTokenError: MismatchedTokenError: Expected ''name'', found '<'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 154, in _shell
    _compile('<stdin>', [pico_c_in])
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 214, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 43, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 63, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:33: run-shell-ast] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [1:33:01]
> $ make run-shell-tokens                                                                                                                                         [±master ●]
./src/pico_c_compiler.py -t -v -m
pico_c > int var = 10
[<TT.LT_COMP,'<',(0, 0)>, <TT.NAME,'stdin',(0, 1)>, <TT.GT_COMP,'>',(0, 6)>, <TT.INT,'int',(1, 0)>, <TT.NAME,'var',(1, 4)>, <TT.ASSIGNMENT,'=',(1, 8)>, <TT.NUMBER,'10',(1, 10)>]
pico_c > ^CTraceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 146, in _shell
    pico_c_in = input('pico_c > ')
KeyboardInterrupt
make: *** [Makefile:39: run-shell-tokens] Interrupt


areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [1:37:38]
> $ make run-shell-tokens                                                                                                                                         [±master ●]
./src/pico_c_compiler.py -t -v -m
pico_c > void main() { int var = 10 + 1 > 1; }
[<TT.NAME,'stdin',(0, 0)>, <TT.VOID,'void',(1, 0)>, <TT.MAIN,'main',(1, 5)>, <TT.L_PAREN,'(',(1, 9)>, <TT.R_PAREN,')',(1, 10)>, <TT.L_BRACE,'{',(1, 12)>, <TT.INT,'int',(1, 14)>, <TT.NAME,'var',(1, 18)>, <TT.ASSIGNMENT,'=',(1, 22)>, <TT.NUMBER,'10',(1, 24)>, <TT.PLUS_OP,'+',(1, 27)>, <TT.NUMBER,'1',(1, 29)>, <TT.GT_COMP,'>',(1, 31)>, <TT.NUMBER,'1',(1, 33)>, <TT.SEMICOLON,';',(1, 34)>, <TT.R_BRACE,'}',(1, 36)>]
pico_c > ^CTraceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 146, in _shell
    pico_c_in = input('pico_c > ')
KeyboardInterrupt
make: *** [Makefile:39: run-shell-tokens] Interrupt


areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [1:38:28]
> $ make run-shell-ast                                                                                                                                            [±master ●]
./src/pico_c_compiler.py -a -m
pico_c > void main() { int var = 10 + 1 > 1; }
(stdin (void main ((int var) = ((10 + 1) > 1))))
pico_c > void main() { int var = 10 + 1 && 1; }
(stdin (void main ((int var) = (((10 + 1)) && ((1))))))
pico_c > void main() { int var = (12 > 1 && 1) + 2; }
(stdin (void main ((int var) = (((12 > 1) && ((1))) + 2))))
pico_c > ^CTraceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 240, in <module>
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 146, in _shell
    pico_c_in = input('pico_c > ')
KeyboardInterrupt
make: *** [Makefile:33: run-shell-ast] Interrupt


areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [1:48:58]
> $ make run-shell-ast                                                                                                                                            [±master ●]
./src/pico_c_compiler.py -a -m
pico_c > void main() { 12 + 2 < 2 && 12 + 1 || 3 }
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 23, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 13, in start_parse
    self.code_fi()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 9, in code_fi
    self._file()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 17, in _file
    self.code_fu()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 17, in code_fu
    self._function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 26, in _function
    self._main_function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 41, in _main_function
    self.code_ss()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 27, in code_ss
    self._ss()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 37, in _ss
    self._s()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 62, in _s
    raise Errors.NoApplicableRuleError("start of a statement",
errors.Errors.NoApplicableRuleError: NoApplicableRuleError: Expected 'start of a statement', found '12'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 153, in _shell
    _compile('stdin', [pico_c_in])
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 213, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 37, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 63, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:33: run-shell-ast] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [1:49:53]
> $ make run-shell-ast                                                                                                                                            [±master ●]
./src/pico_c_compiler.py -a -m
pico_c > void main() { int var = 12 + 2 < 2 && 12 + 1 || 3; }
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 153, in _shell
    _compile('stdin', [pico_c_in])
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 218, in _compile
    print(grammar.reveal_ast())
  File "/home/areo/Documents/Studium/pico_c_compiler/src/root_node.py", line 6, in __repr__
    return f"{self.children[0]}"
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 43, in __repr__
    acc += f" {child}"
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 43, in __repr__
    acc += f" {child}"
  File "/home/areo/Documents/Studium/pico_c_compiler/src/assignment_allocation_nodes.py", line 96, in __repr__
    return f"({self.children[0]} = {self.children[1]})"
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 40, in __repr__
    acc = "(" + f"{self.children[0]}"
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 43, in __repr__
    acc += f" {child}"
  File "/home/areo/Documents/Studium/pico_c_compiler/src/ast_node.py", line 40, in __repr__
    acc = "(" + f"{self.children[0]}"
  File "/home/areo/Documents/Studium/pico_c_compiler/src/logic_nodes.py", line 202, in __repr__
    return "to_bool(" + str(self.arithmetic_expression) + ")"
AttributeError: 'LogicTopBottom' object has no attribute 'arithmetic_expression'
make: *** [Makefile:33: run-shell-ast] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [1:50:31]
> $ make run-shell-ast                                                                                                                                           [±master ●]
./src/pico_c_compiler.py -a -m
pico_c > void main() { int var = 12 + 2 < 2 && 12 + 1 || 3; }
(stdin (void main ((int var) = ((((12 + 2) < 2) && (to_bool((12 + 1)))) || (to_bool(3))))))
pico_c > ^X^CTraceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 146, in _shell
    pico_c_in = input('pico_c > ')
KeyboardInterrupt
make: *** [Makefile:33: run-shell-ast] Interrupt


areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [2:07:08]
> $ make run-shell-as                                                                                                                                            [±master ●]


areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [2:07:15]
> $ make run-shell-ast                                                                                                                                           [±master ●]
./src/pico_c_compiler.py -a -m
pico_c > void main() { int var = 12 + 2 < 2 && 12 + 1 || 3; }
(stdin (void main ((int var) = ((((12 + 2) < 2) && to_bool((12 + 1)) || to_bool(3))))))
pico_c > ^CTraceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 146, in _shell
    pico_c_in = input('pico_c > ')
KeyboardInterrupt
make: *** [Makefile:33: run-shell-ast] Interrupt


areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [2:07:44]
> $ make run-shell-ast                                                                                                                                           [±master ●]
./src/pico_c_compiler.py -a -m
pico_c > void main() { if ('c') { int var = 10 } }
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 23, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 13, in start_parse
    self.code_fi()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 9, in code_fi
    self._file()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 17, in _file
    self.code_fu()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 17, in code_fu
    self._function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 26, in _function
    self._main_function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 41, in _main_function
    self.code_ss()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 27, in code_ss
    self._ss()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 37, in _ss
    self._s()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 53, in _s
    self.code_ie()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 10, in code_ie
    self.code_if_if_else()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 24, in code_if_if_else
    self._handle_all_tastes_unsuccessful("if or if else statement",
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 47, in _handle_all_tastes_unsuccessful
    raise errors[0]
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 154, in taste
    rule()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 32, in _taste_consume_if_without_else
    self._if_without_else()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 43, in _if_without_else
    self._if_condition()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 72, in _if_condition
    self.code_le()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 69, in code_le
    self._or_expr()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 81, in _or_expr
    self._and_expr()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 115, in _and_expr
    self._lo()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 153, in _lo
    raise Errors.MismatchedTokenError("logic operand", token.value,
errors.Errors.MismatchedTokenError: MismatchedTokenError: Expected 'logic operand', found '99'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 153, in _shell
    _compile('stdin', [pico_c_in])
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 213, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 43, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 63, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:33: run-shell-ast] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [2:08:48]
> $ make run-shell-ast                                                                                                                                            [±master ✓]
./src/pico_c_compiler.py -a -m
pico_c > void main() { if ('c') { int var = 10 } }
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 23, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 13, in start_parse
    self.code_fi()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 9, in code_fi
    self._file()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 17, in _file
    self.code_fu()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 17, in code_fu
    self._function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 26, in _function
    self._main_function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 41, in _main_function
    self.code_ss()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 27, in code_ss
    self._ss()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 37, in _ss
    self._s()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 53, in _s
    self.code_ie()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 10, in code_ie
    self.code_if_if_else()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 24, in code_if_if_else
    self._handle_all_tastes_unsuccessful("if or if else statement",
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 47, in _handle_all_tastes_unsuccessful
    raise errors[0]
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 154, in taste
    rule()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 32, in _taste_consume_if_without_else
    self._if_without_else()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 43, in _if_without_else
    self._if_condition()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 72, in _if_condition
    self.code_le()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 69, in code_le
    self._or_expr()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 81, in _or_expr
    self._and_expr()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 115, in _and_expr
    self._lo()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 153, in _lo
    raise Errors.MismatchedTokenError("logic operand", token.value,
errors.Errors.MismatchedTokenError: MismatchedTokenError: Expected 'logic operand', found '99'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 153, in _shell
    _compile('stdin', [pico_c_in])
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 213, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 43, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 63, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:33: run-shell-ast] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [2:13:13]
> $ make run-shell-ast                                                                                                                                            [±master ✓]
./src/pico_c_compiler.py -a -m
pico_c > void main() { if ('c') { int var = 10; }}
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 23, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 13, in start_parse
    self.code_fi()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 9, in code_fi
    self._file()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 17, in _file
    self.code_fu()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 17, in code_fu
    self._function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 26, in _function
    self._main_function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 41, in _main_function
    self.code_ss()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 27, in code_ss
    self._ss()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 37, in _ss
    self._s()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 53, in _s
    self.code_ie()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 10, in code_ie
    self.code_if_if_else()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 24, in code_if_if_else
    self._handle_all_tastes_unsuccessful("if or if else statement",
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 47, in _handle_all_tastes_unsuccessful
    raise errors[0]
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 154, in taste
    rule()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 32, in _taste_consume_if_without_else
    self._if_without_else()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 43, in _if_without_else
    self._if_condition()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 72, in _if_condition
    self.code_le()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 69, in code_le
    self._or_expr()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 81, in _or_expr
    self._and_expr()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 115, in _and_expr
    self._lo()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 153, in _lo
    raise Errors.MismatchedTokenError("logic operand", token.value,
errors.Errors.MismatchedTokenError: MismatchedTokenError: Expected 'logic operand', found '99'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 153, in _shell
    _compile('stdin', [pico_c_in])
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 213, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 43, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 63, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:33: run-shell-ast] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [2:13:27]
> $ make run-shell-tokens                                                                                                                                         [±master ✓]
./src/pico_c_compiler.py -t -v -m
pico_c > void main() { if ('c') { int var = 10; } }
[<TT.NAME,'stdin',(0, 0)>, <TT.VOID,'void',(1, 0)>, <TT.MAIN,'main',(1, 5)>, <TT.L_PAREN,'(',(1, 9)>, <TT.R_PAREN,')',(1, 10)>, <TT.L_BRACE,'{',(1, 12)>, <TT.IF,'if',(1, 14)>, <TT.L_PAREN,'(',(1, 17)>, <TT.CHAR,'99',(1, 18)>, <TT.R_PAREN,')',(1, 21)>, <TT.L_BRACE,'{',(1, 23)>, <TT.INT,'int',(1, 25)>, <TT.NAME,'var',(1, 29)>, <TT.ASSIGNMENT,'=',(1, 33)>, <TT.NUMBER,'10',(1, 35)>, <TT.SEMICOLON,';',(1, 37)>, <TT.R_BRACE,'}',(1, 39)>, <TT.R_BRACE,'}',(1, 41)>]
pico_c > ^CTraceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 146, in _shell
    pico_c_in = input('pico_c > ')
KeyboardInterrupt
make: *** [Makefile:39: run-shell-tokens] Interrupt


areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [2:20:30]
> $ make run-shell-ast                                                                                                                                            [±master ●]
./src/pico_c_compiler.py -a -m
pico_c > void main() { if ('c') { int var = 10; } }
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 23, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 13, in start_parse
    self.code_fi()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 9, in code_fi
    self._file()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 17, in _file
    self.code_fu()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 17, in code_fu
    self._function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 26, in _function
    self._main_function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 41, in _main_function
    self.code_ss()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 27, in code_ss
    self._ss()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 37, in _ss
    self._s()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 53, in _s
    self.code_ie()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 10, in code_ie
    self.code_if_if_else()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 24, in code_if_if_else
    self._handle_all_tastes_unsuccessful("if or if else statement",
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 47, in _handle_all_tastes_unsuccessful
    raise errors[0]
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 154, in taste
    rule()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 32, in _taste_consume_if_without_else
    self._if_without_else()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 43, in _if_without_else
    self._if_condition()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 72, in _if_condition
    self.code_le()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 69, in code_le
    self._or_expr()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 81, in _or_expr
    self._and_expr()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 115, in _and_expr
    self._lo()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_logic_exp.py", line 153, in _lo
    raise Errors.NoApplicableRuleError("logic operand", token.value,
errors.Errors.NoApplicableRuleError: NoApplicableRuleError: Expected 'logic operand', found '99'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 153, in _shell
    _compile('stdin', [pico_c_in])
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 213, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 37, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 63, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:33: run-shell-ast] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [2:20:39]
> $ make run-shell-ast                                                                                                                                            [±master ●]
./src/pico_c_compiler.py -a -m
pico_c > void main() { if ('c') { int var = 10; } }
(stdin (void main (to_bool(99) ((int var) = 10))))
pico_c > void main() { if ('c) { int var = 10 + 'a'; }}
Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 23, in handle
    function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/grammar.py", line 13, in start_parse
    self.code_fi()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 9, in code_fi
    self._file()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_file.py", line 17, in _file
    self.code_fu()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 17, in code_fu
    self._function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 26, in _function
    self._main_function()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_fun.py", line 41, in _main_function
    self.code_ss()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 27, in code_ss
    self._ss()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 37, in _ss
    self._s()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_stmts.py", line 53, in _s
    self.code_ie()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 10, in code_ie
    self.code_if_if_else()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 19, in code_if_if_else
    if self.taste(self._taste_consume_if_without_else, errors):
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 160, in taste
    raise e
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 154, in taste
    rule()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 32, in _taste_consume_if_without_else
    self._if_without_else()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 43, in _if_without_else
    self._if_condition()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parse_if_else.py", line 70, in _if_condition
    self.match([TT.L_PAREN])
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 67, in match
    self.consume_next_token()
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 57, in consume_next_token
    self._sync(1)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 114, in _sync
    self._fill(not_filled_up)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/parser.py", line 123, in _fill
    self.lts += [self.lexer.next_token()]
  File "/home/areo/Documents/Studium/pico_c_compiler/src/lexer.py", line 193, in next_token
    raise Errors.UnclosedCharacterError(
errors.Errors.UnclosedCharacterError: UnclosedCharacterError: Expected 'c', found 'c)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 153, in _shell
    _compile('stdin', [pico_c_in])
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 213, in _compile
    error_handler.handle(grammar.start_parse)
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 31, in handle
    error_message += self._error_message_header(e) + '\n'
  File "/home/areo/Documents/Studium/pico_c_compiler/src/error_handler.py", line 63, in _error_message_header
    return self.grammar.lexer.fname + ':' +\
AttributeError: 'Lexer' object has no attribute 'fname'
make: *** [Makefile:33: run-shell-ast] Error 1

areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                     [2:27:30]
> $ make run-shell-ast                                                                                                                                            [±master ●]
./src/pico_c_compiler.py -a -m
pico_c > void main() { int var = 12 + 2 < 2 && 12 + 1 || 3; }
void main() { if ('c') { int var = 10 + 'a'; }}
(stdin (void main ((int var) = ((((12 + 2) < 2) && to_bool((12 + 1)) || to_bool(3))))))
pico_c > (stdin (void main (to_bool(99) ((int var) = (10 + 97)))))
pico_c > void main() { if ('c') { int var = 10 + 'a'; }}
(stdin (void main (to_bool(99) ((int var) = (10 + 97)))))
pico_c > ^CTraceback (most recent call last):
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 239, in <module>
    main()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 109, in main
    _shell()
  File "/home/areo/Documents/Studium/pico_c_compiler/./src/pico_c_compiler.py", line 146, in _shell
    pico_c_in = input('pico_c > ')
KeyboardInterrupt
make: *** [Makefile:33: run-shell-ast] Interrupt


areo@ArchPC ~/Documents/Studium/pico_c_compiler                                                                                                                    [2:39:48]
> $                                                                                                                                                              [±master ●]
