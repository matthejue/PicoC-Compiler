Hallo Studies,

Wir wollten euch hier mal ein kleines Tool vorstellen, was sich euch vielleicht beim Einüben der RETI Aufgaben als nützlich erweisen könnte.
Die Rede ist von einem PicoC-Compiler, der euch PicoC-Code in RETI-Code übersetzt.
Im Moment beinhaltet die konkrette PicoC Syntax, die sich mit dem PicoC-Compiler überetzen lässt:
- Arithmetische Ausdrücke: `12 * -(4 + ---5) % 45`
- Logische Ausdrücke: `12 > 4 && (0 || 13 + 4)`
- die Primitiven Datentypen int und char: `int var;` und `char c;`
- Zuweisungen: `char var; int x = var = 12 * -(4 + ---5) % 45;`
- if und else Statements: `if (12 > 4 && (0 || 13 + 4)) var = 12 * -(4 + ---5) % 45; else if (1) { var = 12; var = var --1; } else var = 0;`
- while Statements: `while (var <= 12) { if (1) { var = 12; var = var --1; } else var = 0; }`
- und alles muss in einer main Funktion stehen: `void main() {int var = 0; while (var <= 12 && var >= 0) {if (var > 4 && (0 || 13 + 4)) var = var + -(4 + ---5); else { var = var + 2;}}}`

Geplant ist es noch Referenzierung und Dereferenzierung mittels `*` und `&` einzuführen, sowie richtige Funktionen mit return und allem drum und dran, wo die lokalen Variablen auf dem Stack gespeichert werden und in etwas weiterer Ferne vielleicht noch Arrays und Structs und was einem da vielleicht noch alles einfällt ^_^

Das Tool könnt ihr auf dem Nextcloud Server https://ilias.uni-freiburg.de/ilias.php?baseClass=ilLinkResourceHandlerGUI&ref_id=2307903&cmd=calldirectlink
unter /Tutorate/Tutorat_6/pico_c_compiler zum Download finden. Der Sourcecode ist unter https://github.com/matthejue/PicoC-Compiler.git zu finden, wobei dieser gerade in einer Umbauphase zu Python3.10 ist, wo das obercoole Match Case Feature endlich eingeführt wurde, was einem den den Code beim Compilerbau um einiges schöner macht.

Hier eine kleine Bedienungsanleitung, die ihr auch über die Option `-h` aufrufen könnt:

usage: pico_c_compiler.py [-h] [-p] [-a] [-t] [-s START_DATA_SEGMENT] [-e END_DATA_SEGMENT] [-m] [-S] [-O OPTIMIZATION_LEVEL] [-b] [-P] [-v] [infile] [outfile]

If called without arguments, a shell is going to open up where you can type PicoC-Code in. Please keep in mind that all statements have to be enclosed in a main Funktion. The shell can be exited again by typing in exit() or quit().

positional arguments:
  infile                input file with Pico-C Code
  outfile               output file with RETI Code

optional arguments:
  -h, --help            show this help message and exit
  -p, --print           output the file output to the terminal and if --symbol_table is active output the symbol table beneath
  -a, --ast             output the Abstract Syntax Tree instead of RETI Code
  -t, --tokens          output the Tokenlist instead of RETI Code
  -s START_DATA_SEGMENT, --start_data_segment START_DATA_SEGMENT
                        where the datasegment starts (default 100)
  -e END_DATA_SEGMENT, --end_data_segment END_DATA_SEGMENT
                        where the datasegment ends and where the stackpointer starts (default 200)
  -m, --python_stracktrace_error_message
                        show python error messages with stacktrace
  -S, --symbol_table    output the final symbol table into a CSV file after the whole Abstract Syntax Tree was visited
  -O OPTIMIZATION_LEVEL, --optimization-level OPTIMIZATION_LEVEL
                        set the optimiziation level of the compiler (0=save all variables on the stack, 1=use graph coloring to find the best assignment of variables to
                        registers, 2=partially interpret expressions) [NOT IMPLEMENTED YET]
  -b, --binary          produce binary encoded RETI code [NOT IMPLEMENTED YET]
  -P, --prefix-notation
                        write Abstract Syntax Tree in prefix notation [NOT IMPLEMENTED YET]
  -v, --verbose         also show tokentypes in the ast, add comments to the RETI Code and show more context around error messages [NOT IMPLEMENTED YET]

Falls euch Bugs auffallen, wäre es echt nice, wenn ihr die an die Email juergmatth@gmail.com melden könntet und den bösartigen Code, der den Bug ausgelöst hat vielleicht der Email anhängen könntet. Danke schonmal!

Viel Spaß euch mit dem Tool!
